/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class IPLSimulationSettings {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IPLSimulationSettings(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IPLSimulationSettings obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(IPLSimulationSettings obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libphononJNI.delete_IPLSimulationSettings(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setFlags(IPLSimulationFlags value) {
    libphononJNI.IPLSimulationSettings_flags_set(swigCPtr, this, value.swigValue());
  }

  public IPLSimulationFlags getFlags() {
    return IPLSimulationFlags.swigToEnum(libphononJNI.IPLSimulationSettings_flags_get(swigCPtr, this));
  }

  public void setSceneType(IPLSceneType value) {
    libphononJNI.IPLSimulationSettings_sceneType_set(swigCPtr, this, value.swigValue());
  }

  public IPLSceneType getSceneType() {
    return IPLSceneType.swigToEnum(libphononJNI.IPLSimulationSettings_sceneType_get(swigCPtr, this));
  }

  public void setReflectionType(IPLReflectionEffectType value) {
    libphononJNI.IPLSimulationSettings_reflectionType_set(swigCPtr, this, value.swigValue());
  }

  public IPLReflectionEffectType getReflectionType() {
    return IPLReflectionEffectType.swigToEnum(libphononJNI.IPLSimulationSettings_reflectionType_get(swigCPtr, this));
  }

  public void setMaxNumOcclusionSamples(int value) {
    libphononJNI.IPLSimulationSettings_maxNumOcclusionSamples_set(swigCPtr, this, value);
  }

  public int getMaxNumOcclusionSamples() {
    return libphononJNI.IPLSimulationSettings_maxNumOcclusionSamples_get(swigCPtr, this);
  }

  public void setMaxNumRays(int value) {
    libphononJNI.IPLSimulationSettings_maxNumRays_set(swigCPtr, this, value);
  }

  public int getMaxNumRays() {
    return libphononJNI.IPLSimulationSettings_maxNumRays_get(swigCPtr, this);
  }

  public void setNumDiffuseSamples(int value) {
    libphononJNI.IPLSimulationSettings_numDiffuseSamples_set(swigCPtr, this, value);
  }

  public int getNumDiffuseSamples() {
    return libphononJNI.IPLSimulationSettings_numDiffuseSamples_get(swigCPtr, this);
  }

  public void setMaxDuration(float value) {
    libphononJNI.IPLSimulationSettings_maxDuration_set(swigCPtr, this, value);
  }

  public float getMaxDuration() {
    return libphononJNI.IPLSimulationSettings_maxDuration_get(swigCPtr, this);
  }

  public void setMaxOrder(int value) {
    libphononJNI.IPLSimulationSettings_maxOrder_set(swigCPtr, this, value);
  }

  public int getMaxOrder() {
    return libphononJNI.IPLSimulationSettings_maxOrder_get(swigCPtr, this);
  }

  public void setMaxNumSources(int value) {
    libphononJNI.IPLSimulationSettings_maxNumSources_set(swigCPtr, this, value);
  }

  public int getMaxNumSources() {
    return libphononJNI.IPLSimulationSettings_maxNumSources_get(swigCPtr, this);
  }

  public void setNumThreads(int value) {
    libphononJNI.IPLSimulationSettings_numThreads_set(swigCPtr, this, value);
  }

  public int getNumThreads() {
    return libphononJNI.IPLSimulationSettings_numThreads_get(swigCPtr, this);
  }

  public void setRayBatchSize(int value) {
    libphononJNI.IPLSimulationSettings_rayBatchSize_set(swigCPtr, this, value);
  }

  public int getRayBatchSize() {
    return libphononJNI.IPLSimulationSettings_rayBatchSize_get(swigCPtr, this);
  }

  public void setNumVisSamples(int value) {
    libphononJNI.IPLSimulationSettings_numVisSamples_set(swigCPtr, this, value);
  }

  public int getNumVisSamples() {
    return libphononJNI.IPLSimulationSettings_numVisSamples_get(swigCPtr, this);
  }

  public void setSamplingRate(int value) {
    libphononJNI.IPLSimulationSettings_samplingRate_set(swigCPtr, this, value);
  }

  public int getSamplingRate() {
    return libphononJNI.IPLSimulationSettings_samplingRate_get(swigCPtr, this);
  }

  public void setFrameSize(int value) {
    libphononJNI.IPLSimulationSettings_frameSize_set(swigCPtr, this, value);
  }

  public int getFrameSize() {
    return libphononJNI.IPLSimulationSettings_frameSize_get(swigCPtr, this);
  }

  public void setOpenCLDevice(SWIGTYPE_p__IPLOpenCLDevice_t value) {
    libphononJNI.IPLSimulationSettings_openCLDevice_set(swigCPtr, this, SWIGTYPE_p__IPLOpenCLDevice_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLOpenCLDevice_t getOpenCLDevice() {
    long cPtr = libphononJNI.IPLSimulationSettings_openCLDevice_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLOpenCLDevice_t(cPtr, false);
  }

  public void setRadeonRaysDevice(SWIGTYPE_p__IPLRadeonRaysDevice_t value) {
    libphononJNI.IPLSimulationSettings_radeonRaysDevice_set(swigCPtr, this, SWIGTYPE_p__IPLRadeonRaysDevice_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLRadeonRaysDevice_t getRadeonRaysDevice() {
    long cPtr = libphononJNI.IPLSimulationSettings_radeonRaysDevice_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLRadeonRaysDevice_t(cPtr, false);
  }

  public void setTanDevice(SWIGTYPE_p__IPLTrueAudioNextDevice_t value) {
    libphononJNI.IPLSimulationSettings_tanDevice_set(swigCPtr, this, SWIGTYPE_p__IPLTrueAudioNextDevice_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLTrueAudioNextDevice_t getTanDevice() {
    long cPtr = libphononJNI.IPLSimulationSettings_tanDevice_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLTrueAudioNextDevice_t(cPtr, false);
  }

  public IPLSimulationSettings() {
    this(libphononJNI.new_IPLSimulationSettings(), true);
  }

}
