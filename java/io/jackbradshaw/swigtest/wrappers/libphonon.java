/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class libphonon implements libphononConstants {
  public static IPLerror iplContextCreate(IPLContextSettings settings, SWIGTYPE_p_p__IPLContext_t context) {
    return IPLerror.swigToEnum(libphononJNI.iplContextCreate(IPLContextSettings.getCPtr(settings), settings, SWIGTYPE_p_p__IPLContext_t.getCPtr(context)));
  }

  public static SWIGTYPE_p__IPLContext_t iplContextRetain(SWIGTYPE_p__IPLContext_t context) {
    long cPtr = libphononJNI.iplContextRetain(SWIGTYPE_p__IPLContext_t.getCPtr(context));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLContext_t(cPtr, false);
  }

  public static void iplContextRelease(SWIGTYPE_p_p__IPLContext_t context) {
    libphononJNI.iplContextRelease(SWIGTYPE_p_p__IPLContext_t.getCPtr(context));
  }

  public static IPLVector3 iplCalculateRelativeDirection(SWIGTYPE_p__IPLContext_t context, IPLVector3 sourcePosition, IPLVector3 listenerPosition, IPLVector3 listenerAhead, IPLVector3 listenerUp) {
    return new IPLVector3(libphononJNI.iplCalculateRelativeDirection(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLVector3.getCPtr(sourcePosition), sourcePosition, IPLVector3.getCPtr(listenerPosition), listenerPosition, IPLVector3.getCPtr(listenerAhead), listenerAhead, IPLVector3.getCPtr(listenerUp), listenerUp), true);
  }

  public static IPLerror iplSerializedObjectCreate(SWIGTYPE_p__IPLContext_t context, IPLSerializedObjectSettings settings, SWIGTYPE_p_p__IPLSerializedObject_t serializedObject) {
    return IPLerror.swigToEnum(libphononJNI.iplSerializedObjectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLSerializedObjectSettings.getCPtr(settings), settings, SWIGTYPE_p_p__IPLSerializedObject_t.getCPtr(serializedObject)));
  }

  public static SWIGTYPE_p__IPLSerializedObject_t iplSerializedObjectRetain(SWIGTYPE_p__IPLSerializedObject_t serializedObject) {
    long cPtr = libphononJNI.iplSerializedObjectRetain(SWIGTYPE_p__IPLSerializedObject_t.getCPtr(serializedObject));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLSerializedObject_t(cPtr, false);
  }

  public static void iplSerializedObjectRelease(SWIGTYPE_p_p__IPLSerializedObject_t serializedObject) {
    libphononJNI.iplSerializedObjectRelease(SWIGTYPE_p_p__IPLSerializedObject_t.getCPtr(serializedObject));
  }

  public static long iplSerializedObjectGetSize(SWIGTYPE_p__IPLSerializedObject_t serializedObject) {
    return libphononJNI.iplSerializedObjectGetSize(SWIGTYPE_p__IPLSerializedObject_t.getCPtr(serializedObject));
  }

  public static SWIGTYPE_p_unsigned_char iplSerializedObjectGetData(SWIGTYPE_p__IPLSerializedObject_t serializedObject) {
    long cPtr = libphononJNI.iplSerializedObjectGetData(SWIGTYPE_p__IPLSerializedObject_t.getCPtr(serializedObject));
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static IPLerror iplEmbreeDeviceCreate(SWIGTYPE_p__IPLContext_t context, SWIGTYPE_p_void settings, SWIGTYPE_p_p__IPLEmbreeDevice_t device) {
    return IPLerror.swigToEnum(libphononJNI.iplEmbreeDeviceCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), SWIGTYPE_p_void.getCPtr(settings), SWIGTYPE_p_p__IPLEmbreeDevice_t.getCPtr(device)));
  }

  public static SWIGTYPE_p__IPLEmbreeDevice_t iplEmbreeDeviceRetain(SWIGTYPE_p__IPLEmbreeDevice_t device) {
    long cPtr = libphononJNI.iplEmbreeDeviceRetain(SWIGTYPE_p__IPLEmbreeDevice_t.getCPtr(device));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLEmbreeDevice_t(cPtr, false);
  }

  public static void iplEmbreeDeviceRelease(SWIGTYPE_p_p__IPLEmbreeDevice_t device) {
    libphononJNI.iplEmbreeDeviceRelease(SWIGTYPE_p_p__IPLEmbreeDevice_t.getCPtr(device));
  }

  public static IPLerror iplOpenCLDeviceListCreate(SWIGTYPE_p__IPLContext_t context, IPLOpenCLDeviceSettings settings, SWIGTYPE_p_p__IPLOpenCLDeviceList_t deviceList) {
    return IPLerror.swigToEnum(libphononJNI.iplOpenCLDeviceListCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLOpenCLDeviceSettings.getCPtr(settings), settings, SWIGTYPE_p_p__IPLOpenCLDeviceList_t.getCPtr(deviceList)));
  }

  public static SWIGTYPE_p__IPLOpenCLDeviceList_t iplOpenCLDeviceListRetain(SWIGTYPE_p__IPLOpenCLDeviceList_t deviceList) {
    long cPtr = libphononJNI.iplOpenCLDeviceListRetain(SWIGTYPE_p__IPLOpenCLDeviceList_t.getCPtr(deviceList));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLOpenCLDeviceList_t(cPtr, false);
  }

  public static void iplOpenCLDeviceListRelease(SWIGTYPE_p_p__IPLOpenCLDeviceList_t deviceList) {
    libphononJNI.iplOpenCLDeviceListRelease(SWIGTYPE_p_p__IPLOpenCLDeviceList_t.getCPtr(deviceList));
  }

  public static int iplOpenCLDeviceListGetNumDevices(SWIGTYPE_p__IPLOpenCLDeviceList_t deviceList) {
    return libphononJNI.iplOpenCLDeviceListGetNumDevices(SWIGTYPE_p__IPLOpenCLDeviceList_t.getCPtr(deviceList));
  }

  public static void iplOpenCLDeviceListGetDeviceDesc(SWIGTYPE_p__IPLOpenCLDeviceList_t deviceList, int index, IPLOpenCLDeviceDesc deviceDesc) {
    libphononJNI.iplOpenCLDeviceListGetDeviceDesc(SWIGTYPE_p__IPLOpenCLDeviceList_t.getCPtr(deviceList), index, IPLOpenCLDeviceDesc.getCPtr(deviceDesc), deviceDesc);
  }

  public static IPLerror iplOpenCLDeviceCreate(SWIGTYPE_p__IPLContext_t context, SWIGTYPE_p__IPLOpenCLDeviceList_t deviceList, int index, SWIGTYPE_p_p__IPLOpenCLDevice_t device) {
    return IPLerror.swigToEnum(libphononJNI.iplOpenCLDeviceCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), SWIGTYPE_p__IPLOpenCLDeviceList_t.getCPtr(deviceList), index, SWIGTYPE_p_p__IPLOpenCLDevice_t.getCPtr(device)));
  }

  public static IPLerror iplOpenCLDeviceCreateFromExisting(SWIGTYPE_p__IPLContext_t context, SWIGTYPE_p_void convolutionQueue, SWIGTYPE_p_void irUpdateQueue, SWIGTYPE_p_p__IPLOpenCLDevice_t device) {
    return IPLerror.swigToEnum(libphononJNI.iplOpenCLDeviceCreateFromExisting(SWIGTYPE_p__IPLContext_t.getCPtr(context), SWIGTYPE_p_void.getCPtr(convolutionQueue), SWIGTYPE_p_void.getCPtr(irUpdateQueue), SWIGTYPE_p_p__IPLOpenCLDevice_t.getCPtr(device)));
  }

  public static SWIGTYPE_p__IPLOpenCLDevice_t iplOpenCLDeviceRetain(SWIGTYPE_p__IPLOpenCLDevice_t device) {
    long cPtr = libphononJNI.iplOpenCLDeviceRetain(SWIGTYPE_p__IPLOpenCLDevice_t.getCPtr(device));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLOpenCLDevice_t(cPtr, false);
  }

  public static void iplOpenCLDeviceRelease(SWIGTYPE_p_p__IPLOpenCLDevice_t device) {
    libphononJNI.iplOpenCLDeviceRelease(SWIGTYPE_p_p__IPLOpenCLDevice_t.getCPtr(device));
  }

  public static IPLerror iplRadeonRaysDeviceCreate(SWIGTYPE_p__IPLOpenCLDevice_t openCLDevice, SWIGTYPE_p_void settings, SWIGTYPE_p_p__IPLRadeonRaysDevice_t rrDevice) {
    return IPLerror.swigToEnum(libphononJNI.iplRadeonRaysDeviceCreate(SWIGTYPE_p__IPLOpenCLDevice_t.getCPtr(openCLDevice), SWIGTYPE_p_void.getCPtr(settings), SWIGTYPE_p_p__IPLRadeonRaysDevice_t.getCPtr(rrDevice)));
  }

  public static SWIGTYPE_p__IPLRadeonRaysDevice_t iplRadeonRaysDeviceRetain(SWIGTYPE_p__IPLRadeonRaysDevice_t device) {
    long cPtr = libphononJNI.iplRadeonRaysDeviceRetain(SWIGTYPE_p__IPLRadeonRaysDevice_t.getCPtr(device));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLRadeonRaysDevice_t(cPtr, false);
  }

  public static void iplRadeonRaysDeviceRelease(SWIGTYPE_p_p__IPLRadeonRaysDevice_t device) {
    libphononJNI.iplRadeonRaysDeviceRelease(SWIGTYPE_p_p__IPLRadeonRaysDevice_t.getCPtr(device));
  }

  public static IPLerror iplTrueAudioNextDeviceCreate(SWIGTYPE_p__IPLOpenCLDevice_t openCLDevice, IPLTrueAudioNextDeviceSettings settings, SWIGTYPE_p_p__IPLTrueAudioNextDevice_t tanDevice) {
    return IPLerror.swigToEnum(libphononJNI.iplTrueAudioNextDeviceCreate(SWIGTYPE_p__IPLOpenCLDevice_t.getCPtr(openCLDevice), IPLTrueAudioNextDeviceSettings.getCPtr(settings), settings, SWIGTYPE_p_p__IPLTrueAudioNextDevice_t.getCPtr(tanDevice)));
  }

  public static SWIGTYPE_p__IPLTrueAudioNextDevice_t iplTrueAudioNextDeviceRetain(SWIGTYPE_p__IPLTrueAudioNextDevice_t device) {
    long cPtr = libphononJNI.iplTrueAudioNextDeviceRetain(SWIGTYPE_p__IPLTrueAudioNextDevice_t.getCPtr(device));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLTrueAudioNextDevice_t(cPtr, false);
  }

  public static void iplTrueAudioNextDeviceRelease(SWIGTYPE_p_p__IPLTrueAudioNextDevice_t device) {
    libphononJNI.iplTrueAudioNextDeviceRelease(SWIGTYPE_p_p__IPLTrueAudioNextDevice_t.getCPtr(device));
  }

  public static IPLerror iplSceneCreate(SWIGTYPE_p__IPLContext_t context, IPLSceneSettings settings, SWIGTYPE_p_p__IPLScene_t scene) {
    return IPLerror.swigToEnum(libphononJNI.iplSceneCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLSceneSettings.getCPtr(settings), settings, SWIGTYPE_p_p__IPLScene_t.getCPtr(scene)));
  }

  public static SWIGTYPE_p__IPLScene_t iplSceneRetain(SWIGTYPE_p__IPLScene_t scene) {
    long cPtr = libphononJNI.iplSceneRetain(SWIGTYPE_p__IPLScene_t.getCPtr(scene));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLScene_t(cPtr, false);
  }

  public static void iplSceneRelease(SWIGTYPE_p_p__IPLScene_t scene) {
    libphononJNI.iplSceneRelease(SWIGTYPE_p_p__IPLScene_t.getCPtr(scene));
  }

  public static IPLerror iplSceneLoad(SWIGTYPE_p__IPLContext_t context, IPLSceneSettings settings, SWIGTYPE_p__IPLSerializedObject_t serializedObject, SWIGTYPE_p_f_float_p_void__void progressCallback, SWIGTYPE_p_void progressCallbackUserData, SWIGTYPE_p_p__IPLScene_t scene) {
    return IPLerror.swigToEnum(libphononJNI.iplSceneLoad(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLSceneSettings.getCPtr(settings), settings, SWIGTYPE_p__IPLSerializedObject_t.getCPtr(serializedObject), SWIGTYPE_p_f_float_p_void__void.getCPtr(progressCallback), SWIGTYPE_p_void.getCPtr(progressCallbackUserData), SWIGTYPE_p_p__IPLScene_t.getCPtr(scene)));
  }

  public static void iplSceneSave(SWIGTYPE_p__IPLScene_t scene, SWIGTYPE_p__IPLSerializedObject_t serializedObject) {
    libphononJNI.iplSceneSave(SWIGTYPE_p__IPLScene_t.getCPtr(scene), SWIGTYPE_p__IPLSerializedObject_t.getCPtr(serializedObject));
  }

  public static void iplSceneSaveOBJ(SWIGTYPE_p__IPLScene_t scene, String fileBaseName) {
    libphononJNI.iplSceneSaveOBJ(SWIGTYPE_p__IPLScene_t.getCPtr(scene), fileBaseName);
  }

  public static void iplSceneCommit(SWIGTYPE_p__IPLScene_t scene) {
    libphononJNI.iplSceneCommit(SWIGTYPE_p__IPLScene_t.getCPtr(scene));
  }

  public static IPLerror iplStaticMeshCreate(SWIGTYPE_p__IPLScene_t scene, IPLStaticMeshSettings settings, SWIGTYPE_p_p__IPLStaticMesh_t staticMesh) {
    return IPLerror.swigToEnum(libphononJNI.iplStaticMeshCreate(SWIGTYPE_p__IPLScene_t.getCPtr(scene), IPLStaticMeshSettings.getCPtr(settings), settings, SWIGTYPE_p_p__IPLStaticMesh_t.getCPtr(staticMesh)));
  }

  public static SWIGTYPE_p__IPLStaticMesh_t iplStaticMeshRetain(SWIGTYPE_p__IPLStaticMesh_t staticMesh) {
    long cPtr = libphononJNI.iplStaticMeshRetain(SWIGTYPE_p__IPLStaticMesh_t.getCPtr(staticMesh));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLStaticMesh_t(cPtr, false);
  }

  public static void iplStaticMeshRelease(SWIGTYPE_p_p__IPLStaticMesh_t staticMesh) {
    libphononJNI.iplStaticMeshRelease(SWIGTYPE_p_p__IPLStaticMesh_t.getCPtr(staticMesh));
  }

  public static IPLerror iplStaticMeshLoad(SWIGTYPE_p__IPLScene_t scene, SWIGTYPE_p__IPLSerializedObject_t serializedObject, SWIGTYPE_p_f_float_p_void__void progressCallback, SWIGTYPE_p_void progressCallbackUserData, SWIGTYPE_p_p__IPLStaticMesh_t staticMesh) {
    return IPLerror.swigToEnum(libphononJNI.iplStaticMeshLoad(SWIGTYPE_p__IPLScene_t.getCPtr(scene), SWIGTYPE_p__IPLSerializedObject_t.getCPtr(serializedObject), SWIGTYPE_p_f_float_p_void__void.getCPtr(progressCallback), SWIGTYPE_p_void.getCPtr(progressCallbackUserData), SWIGTYPE_p_p__IPLStaticMesh_t.getCPtr(staticMesh)));
  }

  public static void iplStaticMeshSave(SWIGTYPE_p__IPLStaticMesh_t staticMesh, SWIGTYPE_p__IPLSerializedObject_t serializedObject) {
    libphononJNI.iplStaticMeshSave(SWIGTYPE_p__IPLStaticMesh_t.getCPtr(staticMesh), SWIGTYPE_p__IPLSerializedObject_t.getCPtr(serializedObject));
  }

  public static void iplStaticMeshAdd(SWIGTYPE_p__IPLStaticMesh_t staticMesh, SWIGTYPE_p__IPLScene_t scene) {
    libphononJNI.iplStaticMeshAdd(SWIGTYPE_p__IPLStaticMesh_t.getCPtr(staticMesh), SWIGTYPE_p__IPLScene_t.getCPtr(scene));
  }

  public static void iplStaticMeshRemove(SWIGTYPE_p__IPLStaticMesh_t staticMesh, SWIGTYPE_p__IPLScene_t scene) {
    libphononJNI.iplStaticMeshRemove(SWIGTYPE_p__IPLStaticMesh_t.getCPtr(staticMesh), SWIGTYPE_p__IPLScene_t.getCPtr(scene));
  }

  public static IPLerror iplInstancedMeshCreate(SWIGTYPE_p__IPLScene_t scene, IPLInstancedMeshSettings settings, SWIGTYPE_p_p__IPLInstancedMesh_t instancedMesh) {
    return IPLerror.swigToEnum(libphononJNI.iplInstancedMeshCreate(SWIGTYPE_p__IPLScene_t.getCPtr(scene), IPLInstancedMeshSettings.getCPtr(settings), settings, SWIGTYPE_p_p__IPLInstancedMesh_t.getCPtr(instancedMesh)));
  }

  public static SWIGTYPE_p__IPLInstancedMesh_t iplInstancedMeshRetain(SWIGTYPE_p__IPLInstancedMesh_t instancedMesh) {
    long cPtr = libphononJNI.iplInstancedMeshRetain(SWIGTYPE_p__IPLInstancedMesh_t.getCPtr(instancedMesh));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLInstancedMesh_t(cPtr, false);
  }

  public static void iplInstancedMeshRelease(SWIGTYPE_p_p__IPLInstancedMesh_t instancedMesh) {
    libphononJNI.iplInstancedMeshRelease(SWIGTYPE_p_p__IPLInstancedMesh_t.getCPtr(instancedMesh));
  }

  public static void iplInstancedMeshAdd(SWIGTYPE_p__IPLInstancedMesh_t instancedMesh, SWIGTYPE_p__IPLScene_t scene) {
    libphononJNI.iplInstancedMeshAdd(SWIGTYPE_p__IPLInstancedMesh_t.getCPtr(instancedMesh), SWIGTYPE_p__IPLScene_t.getCPtr(scene));
  }

  public static void iplInstancedMeshRemove(SWIGTYPE_p__IPLInstancedMesh_t instancedMesh, SWIGTYPE_p__IPLScene_t scene) {
    libphononJNI.iplInstancedMeshRemove(SWIGTYPE_p__IPLInstancedMesh_t.getCPtr(instancedMesh), SWIGTYPE_p__IPLScene_t.getCPtr(scene));
  }

  public static void iplInstancedMeshUpdateTransform(SWIGTYPE_p__IPLInstancedMesh_t instancedMesh, SWIGTYPE_p__IPLScene_t scene, IPLMatrix4x4 transform) {
    libphononJNI.iplInstancedMeshUpdateTransform(SWIGTYPE_p__IPLInstancedMesh_t.getCPtr(instancedMesh), SWIGTYPE_p__IPLScene_t.getCPtr(scene), IPLMatrix4x4.getCPtr(transform), transform);
  }

  public static IPLerror iplAudioBufferAllocate(SWIGTYPE_p__IPLContext_t context, int numChannels, int numSamples, IPLAudioBuffer audioBuffer) {
    return IPLerror.swigToEnum(libphononJNI.iplAudioBufferAllocate(SWIGTYPE_p__IPLContext_t.getCPtr(context), numChannels, numSamples, IPLAudioBuffer.getCPtr(audioBuffer), audioBuffer));
  }

  public static void iplAudioBufferFree(SWIGTYPE_p__IPLContext_t context, IPLAudioBuffer audioBuffer) {
    libphononJNI.iplAudioBufferFree(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioBuffer.getCPtr(audioBuffer), audioBuffer);
  }

  public static void iplAudioBufferInterleave(SWIGTYPE_p__IPLContext_t context, IPLAudioBuffer src, SWIGTYPE_p_float dst) {
    libphononJNI.iplAudioBufferInterleave(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioBuffer.getCPtr(src), src, SWIGTYPE_p_float.getCPtr(dst));
  }

  public static void iplAudioBufferDeinterleave(SWIGTYPE_p__IPLContext_t context, SWIGTYPE_p_float src, IPLAudioBuffer dst) {
    libphononJNI.iplAudioBufferDeinterleave(SWIGTYPE_p__IPLContext_t.getCPtr(context), SWIGTYPE_p_float.getCPtr(src), IPLAudioBuffer.getCPtr(dst), dst);
  }

  public static void iplAudioBufferMix(SWIGTYPE_p__IPLContext_t context, IPLAudioBuffer in, IPLAudioBuffer mix) {
    libphononJNI.iplAudioBufferMix(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(mix), mix);
  }

  public static void iplAudioBufferDownmix(SWIGTYPE_p__IPLContext_t context, IPLAudioBuffer in, IPLAudioBuffer out) {
    libphononJNI.iplAudioBufferDownmix(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out);
  }

  public static void iplAudioBufferConvertAmbisonics(SWIGTYPE_p__IPLContext_t context, IPLAmbisonicsType inType, IPLAmbisonicsType outType, IPLAudioBuffer in, IPLAudioBuffer out) {
    libphononJNI.iplAudioBufferConvertAmbisonics(SWIGTYPE_p__IPLContext_t.getCPtr(context), inType.swigValue(), outType.swigValue(), IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out);
  }

  public static IPLerror iplHRTFCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLHRTFSettings hrtfSettings, SWIGTYPE_p_p__IPLHRTF_t hrtf) {
    return IPLerror.swigToEnum(libphononJNI.iplHRTFCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLHRTFSettings.getCPtr(hrtfSettings), hrtfSettings, SWIGTYPE_p_p__IPLHRTF_t.getCPtr(hrtf)));
  }

  public static SWIGTYPE_p__IPLHRTF_t iplHRTFRetain(SWIGTYPE_p__IPLHRTF_t hrtf) {
    long cPtr = libphononJNI.iplHRTFRetain(SWIGTYPE_p__IPLHRTF_t.getCPtr(hrtf));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLHRTF_t(cPtr, false);
  }

  public static void iplHRTFRelease(SWIGTYPE_p_p__IPLHRTF_t hrtf) {
    libphononJNI.iplHRTFRelease(SWIGTYPE_p_p__IPLHRTF_t.getCPtr(hrtf));
  }

  public static IPLerror iplPanningEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLPanningEffectSettings effectSettings, SWIGTYPE_p_p__IPLPanningEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplPanningEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLPanningEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLPanningEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLPanningEffect_t iplPanningEffectRetain(SWIGTYPE_p__IPLPanningEffect_t effect) {
    long cPtr = libphononJNI.iplPanningEffectRetain(SWIGTYPE_p__IPLPanningEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLPanningEffect_t(cPtr, false);
  }

  public static void iplPanningEffectRelease(SWIGTYPE_p_p__IPLPanningEffect_t effect) {
    libphononJNI.iplPanningEffectRelease(SWIGTYPE_p_p__IPLPanningEffect_t.getCPtr(effect));
  }

  public static void iplPanningEffectReset(SWIGTYPE_p__IPLPanningEffect_t effect) {
    libphononJNI.iplPanningEffectReset(SWIGTYPE_p__IPLPanningEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplPanningEffectApply(SWIGTYPE_p__IPLPanningEffect_t effect, IPLPanningEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplPanningEffectApply(SWIGTYPE_p__IPLPanningEffect_t.getCPtr(effect), IPLPanningEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplBinauralEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLBinauralEffectSettings effectSettings, SWIGTYPE_p_p__IPLBinauralEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplBinauralEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLBinauralEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLBinauralEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLBinauralEffect_t iplBinauralEffectRetain(SWIGTYPE_p__IPLBinauralEffect_t effect) {
    long cPtr = libphononJNI.iplBinauralEffectRetain(SWIGTYPE_p__IPLBinauralEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLBinauralEffect_t(cPtr, false);
  }

  public static void iplBinauralEffectRelease(SWIGTYPE_p_p__IPLBinauralEffect_t effect) {
    libphononJNI.iplBinauralEffectRelease(SWIGTYPE_p_p__IPLBinauralEffect_t.getCPtr(effect));
  }

  public static void iplBinauralEffectReset(SWIGTYPE_p__IPLBinauralEffect_t effect) {
    libphononJNI.iplBinauralEffectReset(SWIGTYPE_p__IPLBinauralEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplBinauralEffectApply(SWIGTYPE_p__IPLBinauralEffect_t effect, IPLBinauralEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplBinauralEffectApply(SWIGTYPE_p__IPLBinauralEffect_t.getCPtr(effect), IPLBinauralEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplVirtualSurroundEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLVirtualSurroundEffectSettings effectSettings, SWIGTYPE_p_p__IPLVirtualSurroundEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplVirtualSurroundEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLVirtualSurroundEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLVirtualSurroundEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLVirtualSurroundEffect_t iplVirtualSurroundEffectRetain(SWIGTYPE_p__IPLVirtualSurroundEffect_t effect) {
    long cPtr = libphononJNI.iplVirtualSurroundEffectRetain(SWIGTYPE_p__IPLVirtualSurroundEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLVirtualSurroundEffect_t(cPtr, false);
  }

  public static void iplVirtualSurroundEffectRelease(SWIGTYPE_p_p__IPLVirtualSurroundEffect_t effect) {
    libphononJNI.iplVirtualSurroundEffectRelease(SWIGTYPE_p_p__IPLVirtualSurroundEffect_t.getCPtr(effect));
  }

  public static void iplVirtualSurroundEffectReset(SWIGTYPE_p__IPLVirtualSurroundEffect_t effect) {
    libphononJNI.iplVirtualSurroundEffectReset(SWIGTYPE_p__IPLVirtualSurroundEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplVirtualSurroundEffectApply(SWIGTYPE_p__IPLVirtualSurroundEffect_t effect, IPLVirtualSurroundEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplVirtualSurroundEffectApply(SWIGTYPE_p__IPLVirtualSurroundEffect_t.getCPtr(effect), IPLVirtualSurroundEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplAmbisonicsEncodeEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLAmbisonicsEncodeEffectSettings effectSettings, SWIGTYPE_p_p__IPLAmbisonicsEncodeEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplAmbisonicsEncodeEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLAmbisonicsEncodeEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLAmbisonicsEncodeEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLAmbisonicsEncodeEffect_t iplAmbisonicsEncodeEffectRetain(SWIGTYPE_p__IPLAmbisonicsEncodeEffect_t effect) {
    long cPtr = libphononJNI.iplAmbisonicsEncodeEffectRetain(SWIGTYPE_p__IPLAmbisonicsEncodeEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLAmbisonicsEncodeEffect_t(cPtr, false);
  }

  public static void iplAmbisonicsEncodeEffectRelease(SWIGTYPE_p_p__IPLAmbisonicsEncodeEffect_t effect) {
    libphononJNI.iplAmbisonicsEncodeEffectRelease(SWIGTYPE_p_p__IPLAmbisonicsEncodeEffect_t.getCPtr(effect));
  }

  public static void iplAmbisonicsEncodeEffectReset(SWIGTYPE_p__IPLAmbisonicsEncodeEffect_t effect) {
    libphononJNI.iplAmbisonicsEncodeEffectReset(SWIGTYPE_p__IPLAmbisonicsEncodeEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplAmbisonicsEncodeEffectApply(SWIGTYPE_p__IPLAmbisonicsEncodeEffect_t effect, IPLAmbisonicsEncodeEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplAmbisonicsEncodeEffectApply(SWIGTYPE_p__IPLAmbisonicsEncodeEffect_t.getCPtr(effect), IPLAmbisonicsEncodeEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplAmbisonicsPanningEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLAmbisonicsPanningEffectSettings effectSettings, SWIGTYPE_p_p__IPLAmbisonicsPanningEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplAmbisonicsPanningEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLAmbisonicsPanningEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLAmbisonicsPanningEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLAmbisonicsPanningEffect_t iplAmbisonicsPanningEffectRetain(SWIGTYPE_p__IPLAmbisonicsPanningEffect_t effect) {
    long cPtr = libphononJNI.iplAmbisonicsPanningEffectRetain(SWIGTYPE_p__IPLAmbisonicsPanningEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLAmbisonicsPanningEffect_t(cPtr, false);
  }

  public static void iplAmbisonicsPanningEffectRelease(SWIGTYPE_p_p__IPLAmbisonicsPanningEffect_t effect) {
    libphononJNI.iplAmbisonicsPanningEffectRelease(SWIGTYPE_p_p__IPLAmbisonicsPanningEffect_t.getCPtr(effect));
  }

  public static void iplAmbisonicsPanningEffectReset(SWIGTYPE_p__IPLAmbisonicsPanningEffect_t effect) {
    libphononJNI.iplAmbisonicsPanningEffectReset(SWIGTYPE_p__IPLAmbisonicsPanningEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplAmbisonicsPanningEffectApply(SWIGTYPE_p__IPLAmbisonicsPanningEffect_t effect, IPLAmbisonicsPanningEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplAmbisonicsPanningEffectApply(SWIGTYPE_p__IPLAmbisonicsPanningEffect_t.getCPtr(effect), IPLAmbisonicsPanningEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplAmbisonicsBinauralEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLAmbisonicsBinauralEffectSettings effectSettings, SWIGTYPE_p_p__IPLAmbisonicsBinauralEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplAmbisonicsBinauralEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLAmbisonicsBinauralEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLAmbisonicsBinauralEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLAmbisonicsBinauralEffect_t iplAmbisonicsBinauralEffectRetain(SWIGTYPE_p__IPLAmbisonicsBinauralEffect_t effect) {
    long cPtr = libphononJNI.iplAmbisonicsBinauralEffectRetain(SWIGTYPE_p__IPLAmbisonicsBinauralEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLAmbisonicsBinauralEffect_t(cPtr, false);
  }

  public static void iplAmbisonicsBinauralEffectRelease(SWIGTYPE_p_p__IPLAmbisonicsBinauralEffect_t effect) {
    libphononJNI.iplAmbisonicsBinauralEffectRelease(SWIGTYPE_p_p__IPLAmbisonicsBinauralEffect_t.getCPtr(effect));
  }

  public static void iplAmbisonicsBinauralEffectReset(SWIGTYPE_p__IPLAmbisonicsBinauralEffect_t effect) {
    libphononJNI.iplAmbisonicsBinauralEffectReset(SWIGTYPE_p__IPLAmbisonicsBinauralEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplAmbisonicsBinauralEffectApply(SWIGTYPE_p__IPLAmbisonicsBinauralEffect_t effect, IPLAmbisonicsBinauralEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplAmbisonicsBinauralEffectApply(SWIGTYPE_p__IPLAmbisonicsBinauralEffect_t.getCPtr(effect), IPLAmbisonicsBinauralEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplAmbisonicsRotationEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLAmbisonicsRotationEffectSettings effectSettings, SWIGTYPE_p_p__IPLAmbisonicsRotationEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplAmbisonicsRotationEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLAmbisonicsRotationEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLAmbisonicsRotationEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLAmbisonicsRotationEffect_t iplAmbisonicsRotationEffectRetain(SWIGTYPE_p__IPLAmbisonicsRotationEffect_t effect) {
    long cPtr = libphononJNI.iplAmbisonicsRotationEffectRetain(SWIGTYPE_p__IPLAmbisonicsRotationEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLAmbisonicsRotationEffect_t(cPtr, false);
  }

  public static void iplAmbisonicsRotationEffectRelease(SWIGTYPE_p_p__IPLAmbisonicsRotationEffect_t effect) {
    libphononJNI.iplAmbisonicsRotationEffectRelease(SWIGTYPE_p_p__IPLAmbisonicsRotationEffect_t.getCPtr(effect));
  }

  public static void iplAmbisonicsRotationEffectReset(SWIGTYPE_p__IPLAmbisonicsRotationEffect_t effect) {
    libphononJNI.iplAmbisonicsRotationEffectReset(SWIGTYPE_p__IPLAmbisonicsRotationEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplAmbisonicsRotationEffectApply(SWIGTYPE_p__IPLAmbisonicsRotationEffect_t effect, IPLAmbisonicsRotationEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplAmbisonicsRotationEffectApply(SWIGTYPE_p__IPLAmbisonicsRotationEffect_t.getCPtr(effect), IPLAmbisonicsRotationEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplAmbisonicsDecodeEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLAmbisonicsDecodeEffectSettings effectSettings, SWIGTYPE_p_p__IPLAmbisonicsDecodeEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplAmbisonicsDecodeEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLAmbisonicsDecodeEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLAmbisonicsDecodeEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLAmbisonicsDecodeEffect_t iplAmbisonicsDecodeEffectRetain(SWIGTYPE_p__IPLAmbisonicsDecodeEffect_t effect) {
    long cPtr = libphononJNI.iplAmbisonicsDecodeEffectRetain(SWIGTYPE_p__IPLAmbisonicsDecodeEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLAmbisonicsDecodeEffect_t(cPtr, false);
  }

  public static void iplAmbisonicsDecodeEffectRelease(SWIGTYPE_p_p__IPLAmbisonicsDecodeEffect_t effect) {
    libphononJNI.iplAmbisonicsDecodeEffectRelease(SWIGTYPE_p_p__IPLAmbisonicsDecodeEffect_t.getCPtr(effect));
  }

  public static void iplAmbisonicsDecodeEffectReset(SWIGTYPE_p__IPLAmbisonicsDecodeEffect_t effect) {
    libphononJNI.iplAmbisonicsDecodeEffectReset(SWIGTYPE_p__IPLAmbisonicsDecodeEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplAmbisonicsDecodeEffectApply(SWIGTYPE_p__IPLAmbisonicsDecodeEffect_t effect, IPLAmbisonicsDecodeEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplAmbisonicsDecodeEffectApply(SWIGTYPE_p__IPLAmbisonicsDecodeEffect_t.getCPtr(effect), IPLAmbisonicsDecodeEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplDirectEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLDirectEffectSettings effectSettings, SWIGTYPE_p_p__IPLDirectEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplDirectEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLDirectEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLDirectEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLDirectEffect_t iplDirectEffectRetain(SWIGTYPE_p__IPLDirectEffect_t effect) {
    long cPtr = libphononJNI.iplDirectEffectRetain(SWIGTYPE_p__IPLDirectEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLDirectEffect_t(cPtr, false);
  }

  public static void iplDirectEffectRelease(SWIGTYPE_p_p__IPLDirectEffect_t effect) {
    libphononJNI.iplDirectEffectRelease(SWIGTYPE_p_p__IPLDirectEffect_t.getCPtr(effect));
  }

  public static void iplDirectEffectReset(SWIGTYPE_p__IPLDirectEffect_t effect) {
    libphononJNI.iplDirectEffectReset(SWIGTYPE_p__IPLDirectEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplDirectEffectApply(SWIGTYPE_p__IPLDirectEffect_t effect, IPLDirectEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplDirectEffectApply(SWIGTYPE_p__IPLDirectEffect_t.getCPtr(effect), IPLDirectEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplReflectionEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLReflectionEffectSettings effectSettings, SWIGTYPE_p_p__IPLReflectionEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplReflectionEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLReflectionEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLReflectionEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLReflectionEffect_t iplReflectionEffectRetain(SWIGTYPE_p__IPLReflectionEffect_t effect) {
    long cPtr = libphononJNI.iplReflectionEffectRetain(SWIGTYPE_p__IPLReflectionEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLReflectionEffect_t(cPtr, false);
  }

  public static void iplReflectionEffectRelease(SWIGTYPE_p_p__IPLReflectionEffect_t effect) {
    libphononJNI.iplReflectionEffectRelease(SWIGTYPE_p_p__IPLReflectionEffect_t.getCPtr(effect));
  }

  public static void iplReflectionEffectReset(SWIGTYPE_p__IPLReflectionEffect_t effect) {
    libphononJNI.iplReflectionEffectReset(SWIGTYPE_p__IPLReflectionEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplReflectionEffectApply(SWIGTYPE_p__IPLReflectionEffect_t effect, IPLReflectionEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out, SWIGTYPE_p__IPLReflectionMixer_t mixer) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplReflectionEffectApply(SWIGTYPE_p__IPLReflectionEffect_t.getCPtr(effect), IPLReflectionEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out, SWIGTYPE_p__IPLReflectionMixer_t.getCPtr(mixer)));
  }

  public static IPLerror iplReflectionMixerCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLReflectionEffectSettings effectSettings, SWIGTYPE_p_p__IPLReflectionMixer_t mixer) {
    return IPLerror.swigToEnum(libphononJNI.iplReflectionMixerCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLReflectionEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLReflectionMixer_t.getCPtr(mixer)));
  }

  public static SWIGTYPE_p__IPLReflectionMixer_t iplReflectionMixerRetain(SWIGTYPE_p__IPLReflectionMixer_t mixer) {
    long cPtr = libphononJNI.iplReflectionMixerRetain(SWIGTYPE_p__IPLReflectionMixer_t.getCPtr(mixer));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLReflectionMixer_t(cPtr, false);
  }

  public static void iplReflectionMixerRelease(SWIGTYPE_p_p__IPLReflectionMixer_t mixer) {
    libphononJNI.iplReflectionMixerRelease(SWIGTYPE_p_p__IPLReflectionMixer_t.getCPtr(mixer));
  }

  public static void iplReflectionMixerReset(SWIGTYPE_p__IPLReflectionMixer_t mixer) {
    libphononJNI.iplReflectionMixerReset(SWIGTYPE_p__IPLReflectionMixer_t.getCPtr(mixer));
  }

  public static IPLAudioEffectState iplReflectionMixerApply(SWIGTYPE_p__IPLReflectionMixer_t mixer, IPLReflectionEffectParams params, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplReflectionMixerApply(SWIGTYPE_p__IPLReflectionMixer_t.getCPtr(mixer), IPLReflectionEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplPathEffectCreate(SWIGTYPE_p__IPLContext_t context, IPLAudioSettings audioSettings, IPLPathEffectSettings effectSettings, SWIGTYPE_p_p__IPLPathEffect_t effect) {
    return IPLerror.swigToEnum(libphononJNI.iplPathEffectCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLAudioSettings.getCPtr(audioSettings), audioSettings, IPLPathEffectSettings.getCPtr(effectSettings), effectSettings, SWIGTYPE_p_p__IPLPathEffect_t.getCPtr(effect)));
  }

  public static SWIGTYPE_p__IPLPathEffect_t iplPathEffectRetain(SWIGTYPE_p__IPLPathEffect_t effect) {
    long cPtr = libphononJNI.iplPathEffectRetain(SWIGTYPE_p__IPLPathEffect_t.getCPtr(effect));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLPathEffect_t(cPtr, false);
  }

  public static void iplPathEffectRelease(SWIGTYPE_p_p__IPLPathEffect_t effect) {
    libphononJNI.iplPathEffectRelease(SWIGTYPE_p_p__IPLPathEffect_t.getCPtr(effect));
  }

  public static void iplPathEffectReset(SWIGTYPE_p__IPLPathEffect_t effect) {
    libphononJNI.iplPathEffectReset(SWIGTYPE_p__IPLPathEffect_t.getCPtr(effect));
  }

  public static IPLAudioEffectState iplPathEffectApply(SWIGTYPE_p__IPLPathEffect_t effect, IPLPathEffectParams params, IPLAudioBuffer in, IPLAudioBuffer out) {
    return IPLAudioEffectState.swigToEnum(libphononJNI.iplPathEffectApply(SWIGTYPE_p__IPLPathEffect_t.getCPtr(effect), IPLPathEffectParams.getCPtr(params), params, IPLAudioBuffer.getCPtr(in), in, IPLAudioBuffer.getCPtr(out), out));
  }

  public static IPLerror iplProbeArrayCreate(SWIGTYPE_p__IPLContext_t context, SWIGTYPE_p_p__IPLProbeArray_t probeArray) {
    return IPLerror.swigToEnum(libphononJNI.iplProbeArrayCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), SWIGTYPE_p_p__IPLProbeArray_t.getCPtr(probeArray)));
  }

  public static SWIGTYPE_p__IPLProbeArray_t iplProbeArrayRetain(SWIGTYPE_p__IPLProbeArray_t probeArray) {
    long cPtr = libphononJNI.iplProbeArrayRetain(SWIGTYPE_p__IPLProbeArray_t.getCPtr(probeArray));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLProbeArray_t(cPtr, false);
  }

  public static void iplProbeArrayRelease(SWIGTYPE_p_p__IPLProbeArray_t probeArray) {
    libphononJNI.iplProbeArrayRelease(SWIGTYPE_p_p__IPLProbeArray_t.getCPtr(probeArray));
  }

  public static void iplProbeArrayGenerateProbes(SWIGTYPE_p__IPLProbeArray_t probeArray, SWIGTYPE_p__IPLScene_t scene, IPLProbeGenerationParams params) {
    libphononJNI.iplProbeArrayGenerateProbes(SWIGTYPE_p__IPLProbeArray_t.getCPtr(probeArray), SWIGTYPE_p__IPLScene_t.getCPtr(scene), IPLProbeGenerationParams.getCPtr(params), params);
  }

  public static int iplProbeArrayGetNumProbes(SWIGTYPE_p__IPLProbeArray_t probeArray) {
    return libphononJNI.iplProbeArrayGetNumProbes(SWIGTYPE_p__IPLProbeArray_t.getCPtr(probeArray));
  }

  public static IPLSphere iplProbeArrayGetProbe(SWIGTYPE_p__IPLProbeArray_t probeArray, int index) {
    return new IPLSphere(libphononJNI.iplProbeArrayGetProbe(SWIGTYPE_p__IPLProbeArray_t.getCPtr(probeArray), index), true);
  }

  public static IPLerror iplProbeBatchCreate(SWIGTYPE_p__IPLContext_t context, SWIGTYPE_p_p__IPLProbeBatch_t probeBatch) {
    return IPLerror.swigToEnum(libphononJNI.iplProbeBatchCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), SWIGTYPE_p_p__IPLProbeBatch_t.getCPtr(probeBatch)));
  }

  public static SWIGTYPE_p__IPLProbeBatch_t iplProbeBatchRetain(SWIGTYPE_p__IPLProbeBatch_t probeBatch) {
    long cPtr = libphononJNI.iplProbeBatchRetain(SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLProbeBatch_t(cPtr, false);
  }

  public static void iplProbeBatchRelease(SWIGTYPE_p_p__IPLProbeBatch_t probeBatch) {
    libphononJNI.iplProbeBatchRelease(SWIGTYPE_p_p__IPLProbeBatch_t.getCPtr(probeBatch));
  }

  public static IPLerror iplProbeBatchLoad(SWIGTYPE_p__IPLContext_t context, SWIGTYPE_p__IPLSerializedObject_t serializedObject, SWIGTYPE_p_p__IPLProbeBatch_t probeBatch) {
    return IPLerror.swigToEnum(libphononJNI.iplProbeBatchLoad(SWIGTYPE_p__IPLContext_t.getCPtr(context), SWIGTYPE_p__IPLSerializedObject_t.getCPtr(serializedObject), SWIGTYPE_p_p__IPLProbeBatch_t.getCPtr(probeBatch)));
  }

  public static void iplProbeBatchSave(SWIGTYPE_p__IPLProbeBatch_t probeBatch, SWIGTYPE_p__IPLSerializedObject_t serializedObject) {
    libphononJNI.iplProbeBatchSave(SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch), SWIGTYPE_p__IPLSerializedObject_t.getCPtr(serializedObject));
  }

  public static int iplProbeBatchGetNumProbes(SWIGTYPE_p__IPLProbeBatch_t probeBatch) {
    return libphononJNI.iplProbeBatchGetNumProbes(SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch));
  }

  public static void iplProbeBatchAddProbe(SWIGTYPE_p__IPLProbeBatch_t probeBatch, IPLSphere probe) {
    libphononJNI.iplProbeBatchAddProbe(SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch), IPLSphere.getCPtr(probe), probe);
  }

  public static void iplProbeBatchAddProbeArray(SWIGTYPE_p__IPLProbeBatch_t probeBatch, SWIGTYPE_p__IPLProbeArray_t probeArray) {
    libphononJNI.iplProbeBatchAddProbeArray(SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch), SWIGTYPE_p__IPLProbeArray_t.getCPtr(probeArray));
  }

  public static void iplProbeBatchRemoveProbe(SWIGTYPE_p__IPLProbeBatch_t probeBatch, int index) {
    libphononJNI.iplProbeBatchRemoveProbe(SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch), index);
  }

  public static void iplProbeBatchCommit(SWIGTYPE_p__IPLProbeBatch_t probeBatch) {
    libphononJNI.iplProbeBatchCommit(SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch));
  }

  public static void iplProbeBatchRemoveData(SWIGTYPE_p__IPLProbeBatch_t probeBatch, IPLBakedDataIdentifier identifier) {
    libphononJNI.iplProbeBatchRemoveData(SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch), IPLBakedDataIdentifier.getCPtr(identifier), identifier);
  }

  public static long iplProbeBatchGetDataSize(SWIGTYPE_p__IPLProbeBatch_t probeBatch, IPLBakedDataIdentifier identifier) {
    return libphononJNI.iplProbeBatchGetDataSize(SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch), IPLBakedDataIdentifier.getCPtr(identifier), identifier);
  }

  public static void iplReflectionsBakerBake(SWIGTYPE_p__IPLContext_t context, IPLReflectionsBakeParams params, SWIGTYPE_p_f_float_p_void__void progressCallback, SWIGTYPE_p_void userData) {
    libphononJNI.iplReflectionsBakerBake(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLReflectionsBakeParams.getCPtr(params), params, SWIGTYPE_p_f_float_p_void__void.getCPtr(progressCallback), SWIGTYPE_p_void.getCPtr(userData));
  }

  public static void iplReflectionsBakerCancelBake(SWIGTYPE_p__IPLContext_t context) {
    libphononJNI.iplReflectionsBakerCancelBake(SWIGTYPE_p__IPLContext_t.getCPtr(context));
  }

  public static void iplPathBakerBake(SWIGTYPE_p__IPLContext_t context, IPLPathBakeParams params, SWIGTYPE_p_f_float_p_void__void progressCallback, SWIGTYPE_p_void userData) {
    libphononJNI.iplPathBakerBake(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLPathBakeParams.getCPtr(params), params, SWIGTYPE_p_f_float_p_void__void.getCPtr(progressCallback), SWIGTYPE_p_void.getCPtr(userData));
  }

  public static void iplPathBakerCancelBake(SWIGTYPE_p__IPLContext_t context) {
    libphononJNI.iplPathBakerCancelBake(SWIGTYPE_p__IPLContext_t.getCPtr(context));
  }

  public static IPLerror iplSimulatorCreate(SWIGTYPE_p__IPLContext_t context, IPLSimulationSettings settings, SWIGTYPE_p_p__IPLSimulator_t simulator) {
    return IPLerror.swigToEnum(libphononJNI.iplSimulatorCreate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLSimulationSettings.getCPtr(settings), settings, SWIGTYPE_p_p__IPLSimulator_t.getCPtr(simulator)));
  }

  public static SWIGTYPE_p__IPLSimulator_t iplSimulatorRetain(SWIGTYPE_p__IPLSimulator_t simulator) {
    long cPtr = libphononJNI.iplSimulatorRetain(SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLSimulator_t(cPtr, false);
  }

  public static void iplSimulatorRelease(SWIGTYPE_p_p__IPLSimulator_t simulator) {
    libphononJNI.iplSimulatorRelease(SWIGTYPE_p_p__IPLSimulator_t.getCPtr(simulator));
  }

  public static void iplSimulatorSetScene(SWIGTYPE_p__IPLSimulator_t simulator, SWIGTYPE_p__IPLScene_t scene) {
    libphononJNI.iplSimulatorSetScene(SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator), SWIGTYPE_p__IPLScene_t.getCPtr(scene));
  }

  public static void iplSimulatorAddProbeBatch(SWIGTYPE_p__IPLSimulator_t simulator, SWIGTYPE_p__IPLProbeBatch_t probeBatch) {
    libphononJNI.iplSimulatorAddProbeBatch(SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator), SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch));
  }

  public static void iplSimulatorRemoveProbeBatch(SWIGTYPE_p__IPLSimulator_t simulator, SWIGTYPE_p__IPLProbeBatch_t probeBatch) {
    libphononJNI.iplSimulatorRemoveProbeBatch(SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator), SWIGTYPE_p__IPLProbeBatch_t.getCPtr(probeBatch));
  }

  public static void iplSimulatorSetSharedInputs(SWIGTYPE_p__IPLSimulator_t simulator, IPLSimulationFlags flags, IPLSimulationSharedInputs sharedInputs) {
    libphononJNI.iplSimulatorSetSharedInputs(SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator), flags.swigValue(), IPLSimulationSharedInputs.getCPtr(sharedInputs), sharedInputs);
  }

  public static void iplSimulatorCommit(SWIGTYPE_p__IPLSimulator_t simulator) {
    libphononJNI.iplSimulatorCommit(SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator));
  }

  public static void iplSimulatorRunDirect(SWIGTYPE_p__IPLSimulator_t simulator) {
    libphononJNI.iplSimulatorRunDirect(SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator));
  }

  public static void iplSimulatorRunReflections(SWIGTYPE_p__IPLSimulator_t simulator) {
    libphononJNI.iplSimulatorRunReflections(SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator));
  }

  public static void iplSimulatorRunPathing(SWIGTYPE_p__IPLSimulator_t simulator) {
    libphononJNI.iplSimulatorRunPathing(SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator));
  }

  public static IPLerror iplSourceCreate(SWIGTYPE_p__IPLSimulator_t simulator, IPLSourceSettings settings, SWIGTYPE_p_p__IPLSource_t source) {
    return IPLerror.swigToEnum(libphononJNI.iplSourceCreate(SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator), IPLSourceSettings.getCPtr(settings), settings, SWIGTYPE_p_p__IPLSource_t.getCPtr(source)));
  }

  public static SWIGTYPE_p__IPLSource_t iplSourceRetain(SWIGTYPE_p__IPLSource_t source) {
    long cPtr = libphononJNI.iplSourceRetain(SWIGTYPE_p__IPLSource_t.getCPtr(source));
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLSource_t(cPtr, false);
  }

  public static void iplSourceRelease(SWIGTYPE_p_p__IPLSource_t source) {
    libphononJNI.iplSourceRelease(SWIGTYPE_p_p__IPLSource_t.getCPtr(source));
  }

  public static void iplSourceAdd(SWIGTYPE_p__IPLSource_t source, SWIGTYPE_p__IPLSimulator_t simulator) {
    libphononJNI.iplSourceAdd(SWIGTYPE_p__IPLSource_t.getCPtr(source), SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator));
  }

  public static void iplSourceRemove(SWIGTYPE_p__IPLSource_t source, SWIGTYPE_p__IPLSimulator_t simulator) {
    libphononJNI.iplSourceRemove(SWIGTYPE_p__IPLSource_t.getCPtr(source), SWIGTYPE_p__IPLSimulator_t.getCPtr(simulator));
  }

  public static void iplSourceSetInputs(SWIGTYPE_p__IPLSource_t source, IPLSimulationFlags flags, IPLSimulationInputs inputs) {
    libphononJNI.iplSourceSetInputs(SWIGTYPE_p__IPLSource_t.getCPtr(source), flags.swigValue(), IPLSimulationInputs.getCPtr(inputs), inputs);
  }

  public static void iplSourceGetOutputs(SWIGTYPE_p__IPLSource_t source, IPLSimulationFlags flags, IPLSimulationOutputs outputs) {
    libphononJNI.iplSourceGetOutputs(SWIGTYPE_p__IPLSource_t.getCPtr(source), flags.swigValue(), IPLSimulationOutputs.getCPtr(outputs), outputs);
  }

  public static float iplDistanceAttenuationCalculate(SWIGTYPE_p__IPLContext_t context, IPLVector3 source, IPLVector3 listener, IPLDistanceAttenuationModel model) {
    return libphononJNI.iplDistanceAttenuationCalculate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLVector3.getCPtr(source), source, IPLVector3.getCPtr(listener), listener, IPLDistanceAttenuationModel.getCPtr(model), model);
  }

  public static void iplAirAbsorptionCalculate(SWIGTYPE_p__IPLContext_t context, IPLVector3 source, IPLVector3 listener, IPLAirAbsorptionModel model, SWIGTYPE_p_float airAbsorption) {
    libphononJNI.iplAirAbsorptionCalculate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLVector3.getCPtr(source), source, IPLVector3.getCPtr(listener), listener, IPLAirAbsorptionModel.getCPtr(model), model, SWIGTYPE_p_float.getCPtr(airAbsorption));
  }

  public static float iplDirectivityCalculate(SWIGTYPE_p__IPLContext_t context, IPLCoordinateSpace3 source, IPLVector3 listener, IPLDirectivity model) {
    return libphononJNI.iplDirectivityCalculate(SWIGTYPE_p__IPLContext_t.getCPtr(context), IPLCoordinateSpace3.getCPtr(source), source, IPLVector3.getCPtr(listener), listener, IPLDirectivity.getCPtr(model), model);
  }

  public static void setApi(SWIGTYPE_p_namespace value) {
    libphononJNI.api_set(SWIGTYPE_p_namespace.getCPtr(value));
  }

  public static SWIGTYPE_p_namespace getApi() {
    return new SWIGTYPE_p_namespace(libphononJNI.api_get(), true);
  }

}
