/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class IPLSimulationInputs {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IPLSimulationInputs(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IPLSimulationInputs obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(IPLSimulationInputs obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libphononJNI.delete_IPLSimulationInputs(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setFlags(IPLSimulationFlags value) {
    libphononJNI.IPLSimulationInputs_flags_set(swigCPtr, this, value.swigValue());
  }

  public IPLSimulationFlags getFlags() {
    return IPLSimulationFlags.swigToEnum(libphononJNI.IPLSimulationInputs_flags_get(swigCPtr, this));
  }

  public void setDirectFlags(IPLDirectSimulationFlags value) {
    libphononJNI.IPLSimulationInputs_directFlags_set(swigCPtr, this, value.swigValue());
  }

  public IPLDirectSimulationFlags getDirectFlags() {
    return IPLDirectSimulationFlags.swigToEnum(libphononJNI.IPLSimulationInputs_directFlags_get(swigCPtr, this));
  }

  public void setSource(IPLCoordinateSpace3 value) {
    libphononJNI.IPLSimulationInputs_source_set(swigCPtr, this, IPLCoordinateSpace3.getCPtr(value), value);
  }

  public IPLCoordinateSpace3 getSource() {
    long cPtr = libphononJNI.IPLSimulationInputs_source_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLCoordinateSpace3(cPtr, false);
  }

  public void setDistanceAttenuationModel(IPLDistanceAttenuationModel value) {
    libphononJNI.IPLSimulationInputs_distanceAttenuationModel_set(swigCPtr, this, IPLDistanceAttenuationModel.getCPtr(value), value);
  }

  public IPLDistanceAttenuationModel getDistanceAttenuationModel() {
    long cPtr = libphononJNI.IPLSimulationInputs_distanceAttenuationModel_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLDistanceAttenuationModel(cPtr, false);
  }

  public void setAirAbsorptionModel(IPLAirAbsorptionModel value) {
    libphononJNI.IPLSimulationInputs_airAbsorptionModel_set(swigCPtr, this, IPLAirAbsorptionModel.getCPtr(value), value);
  }

  public IPLAirAbsorptionModel getAirAbsorptionModel() {
    long cPtr = libphononJNI.IPLSimulationInputs_airAbsorptionModel_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLAirAbsorptionModel(cPtr, false);
  }

  public void setDirectivity(IPLDirectivity value) {
    libphononJNI.IPLSimulationInputs_directivity_set(swigCPtr, this, IPLDirectivity.getCPtr(value), value);
  }

  public IPLDirectivity getDirectivity() {
    long cPtr = libphononJNI.IPLSimulationInputs_directivity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLDirectivity(cPtr, false);
  }

  public void setOcclusionType(IPLOcclusionType value) {
    libphononJNI.IPLSimulationInputs_occlusionType_set(swigCPtr, this, value.swigValue());
  }

  public IPLOcclusionType getOcclusionType() {
    return IPLOcclusionType.swigToEnum(libphononJNI.IPLSimulationInputs_occlusionType_get(swigCPtr, this));
  }

  public void setOcclusionRadius(float value) {
    libphononJNI.IPLSimulationInputs_occlusionRadius_set(swigCPtr, this, value);
  }

  public float getOcclusionRadius() {
    return libphononJNI.IPLSimulationInputs_occlusionRadius_get(swigCPtr, this);
  }

  public void setNumOcclusionSamples(int value) {
    libphononJNI.IPLSimulationInputs_numOcclusionSamples_set(swigCPtr, this, value);
  }

  public int getNumOcclusionSamples() {
    return libphononJNI.IPLSimulationInputs_numOcclusionSamples_get(swigCPtr, this);
  }

  public void setReverbScale(SWIGTYPE_p_float value) {
    libphononJNI.IPLSimulationInputs_reverbScale_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  public SWIGTYPE_p_float getReverbScale() {
    long cPtr = libphononJNI.IPLSimulationInputs_reverbScale_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public void setHybridReverbTransitionTime(float value) {
    libphononJNI.IPLSimulationInputs_hybridReverbTransitionTime_set(swigCPtr, this, value);
  }

  public float getHybridReverbTransitionTime() {
    return libphononJNI.IPLSimulationInputs_hybridReverbTransitionTime_get(swigCPtr, this);
  }

  public void setHybridReverbOverlapPercent(float value) {
    libphononJNI.IPLSimulationInputs_hybridReverbOverlapPercent_set(swigCPtr, this, value);
  }

  public float getHybridReverbOverlapPercent() {
    return libphononJNI.IPLSimulationInputs_hybridReverbOverlapPercent_get(swigCPtr, this);
  }

  public void setBaked(IPLbool value) {
    libphononJNI.IPLSimulationInputs_baked_set(swigCPtr, this, value.swigValue());
  }

  public IPLbool getBaked() {
    return IPLbool.swigToEnum(libphononJNI.IPLSimulationInputs_baked_get(swigCPtr, this));
  }

  public void setBakedDataIdentifier(IPLBakedDataIdentifier value) {
    libphononJNI.IPLSimulationInputs_bakedDataIdentifier_set(swigCPtr, this, IPLBakedDataIdentifier.getCPtr(value), value);
  }

  public IPLBakedDataIdentifier getBakedDataIdentifier() {
    long cPtr = libphononJNI.IPLSimulationInputs_bakedDataIdentifier_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLBakedDataIdentifier(cPtr, false);
  }

  public void setPathingProbes(SWIGTYPE_p__IPLProbeBatch_t value) {
    libphononJNI.IPLSimulationInputs_pathingProbes_set(swigCPtr, this, SWIGTYPE_p__IPLProbeBatch_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLProbeBatch_t getPathingProbes() {
    long cPtr = libphononJNI.IPLSimulationInputs_pathingProbes_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLProbeBatch_t(cPtr, false);
  }

  public void setVisRadius(float value) {
    libphononJNI.IPLSimulationInputs_visRadius_set(swigCPtr, this, value);
  }

  public float getVisRadius() {
    return libphononJNI.IPLSimulationInputs_visRadius_get(swigCPtr, this);
  }

  public void setVisThreshold(float value) {
    libphononJNI.IPLSimulationInputs_visThreshold_set(swigCPtr, this, value);
  }

  public float getVisThreshold() {
    return libphononJNI.IPLSimulationInputs_visThreshold_get(swigCPtr, this);
  }

  public void setVisRange(float value) {
    libphononJNI.IPLSimulationInputs_visRange_set(swigCPtr, this, value);
  }

  public float getVisRange() {
    return libphononJNI.IPLSimulationInputs_visRange_get(swigCPtr, this);
  }

  public void setPathingOrder(int value) {
    libphononJNI.IPLSimulationInputs_pathingOrder_set(swigCPtr, this, value);
  }

  public int getPathingOrder() {
    return libphononJNI.IPLSimulationInputs_pathingOrder_get(swigCPtr, this);
  }

  public void setEnableValidation(IPLbool value) {
    libphononJNI.IPLSimulationInputs_enableValidation_set(swigCPtr, this, value.swigValue());
  }

  public IPLbool getEnableValidation() {
    return IPLbool.swigToEnum(libphononJNI.IPLSimulationInputs_enableValidation_get(swigCPtr, this));
  }

  public void setFindAlternatePaths(IPLbool value) {
    libphononJNI.IPLSimulationInputs_findAlternatePaths_set(swigCPtr, this, value.swigValue());
  }

  public IPLbool getFindAlternatePaths() {
    return IPLbool.swigToEnum(libphononJNI.IPLSimulationInputs_findAlternatePaths_get(swigCPtr, this));
  }

  public void setNumTransmissionRays(int value) {
    libphononJNI.IPLSimulationInputs_numTransmissionRays_set(swigCPtr, this, value);
  }

  public int getNumTransmissionRays() {
    return libphononJNI.IPLSimulationInputs_numTransmissionRays_get(swigCPtr, this);
  }

  public IPLSimulationInputs() {
    this(libphononJNI.new_IPLSimulationInputs(), true);
  }

}
