/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class IPLSimulationSharedInputs {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IPLSimulationSharedInputs(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IPLSimulationSharedInputs obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(IPLSimulationSharedInputs obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libphononJNI.delete_IPLSimulationSharedInputs(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setListener(IPLCoordinateSpace3 value) {
    libphononJNI.IPLSimulationSharedInputs_listener_set(swigCPtr, this, IPLCoordinateSpace3.getCPtr(value), value);
  }

  public IPLCoordinateSpace3 getListener() {
    long cPtr = libphononJNI.IPLSimulationSharedInputs_listener_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLCoordinateSpace3(cPtr, false);
  }

  public void setNumRays(int value) {
    libphononJNI.IPLSimulationSharedInputs_numRays_set(swigCPtr, this, value);
  }

  public int getNumRays() {
    return libphononJNI.IPLSimulationSharedInputs_numRays_get(swigCPtr, this);
  }

  public void setNumBounces(int value) {
    libphononJNI.IPLSimulationSharedInputs_numBounces_set(swigCPtr, this, value);
  }

  public int getNumBounces() {
    return libphononJNI.IPLSimulationSharedInputs_numBounces_get(swigCPtr, this);
  }

  public void setDuration(float value) {
    libphononJNI.IPLSimulationSharedInputs_duration_set(swigCPtr, this, value);
  }

  public float getDuration() {
    return libphononJNI.IPLSimulationSharedInputs_duration_get(swigCPtr, this);
  }

  public void setOrder(int value) {
    libphononJNI.IPLSimulationSharedInputs_order_set(swigCPtr, this, value);
  }

  public int getOrder() {
    return libphononJNI.IPLSimulationSharedInputs_order_get(swigCPtr, this);
  }

  public void setIrradianceMinDistance(float value) {
    libphononJNI.IPLSimulationSharedInputs_irradianceMinDistance_set(swigCPtr, this, value);
  }

  public float getIrradianceMinDistance() {
    return libphononJNI.IPLSimulationSharedInputs_irradianceMinDistance_get(swigCPtr, this);
  }

  public void setPathingVisCallback(SWIGTYPE_p_f_IPLVector3_IPLVector3_enum_IPLbool_p_void__void value) {
    libphononJNI.IPLSimulationSharedInputs_pathingVisCallback_set(swigCPtr, this, SWIGTYPE_p_f_IPLVector3_IPLVector3_enum_IPLbool_p_void__void.getCPtr(value));
  }

  public SWIGTYPE_p_f_IPLVector3_IPLVector3_enum_IPLbool_p_void__void getPathingVisCallback() {
    long cPtr = libphononJNI.IPLSimulationSharedInputs_pathingVisCallback_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_IPLVector3_IPLVector3_enum_IPLbool_p_void__void(cPtr, false);
  }

  public void setPathingUserData(SWIGTYPE_p_void value) {
    libphononJNI.IPLSimulationSharedInputs_pathingUserData_set(swigCPtr, this, SWIGTYPE_p_void.getCPtr(value));
  }

  public SWIGTYPE_p_void getPathingUserData() {
    long cPtr = libphononJNI.IPLSimulationSharedInputs_pathingUserData_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public IPLSimulationSharedInputs() {
    this(libphononJNI.new_IPLSimulationSharedInputs(), true);
  }

}
