/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class IPLReflectionsBakeParams {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IPLReflectionsBakeParams(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IPLReflectionsBakeParams obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(IPLReflectionsBakeParams obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libphononJNI.delete_IPLReflectionsBakeParams(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setScene(SWIGTYPE_p__IPLScene_t value) {
    libphononJNI.IPLReflectionsBakeParams_scene_set(swigCPtr, this, SWIGTYPE_p__IPLScene_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLScene_t getScene() {
    long cPtr = libphononJNI.IPLReflectionsBakeParams_scene_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLScene_t(cPtr, false);
  }

  public void setProbeBatch(SWIGTYPE_p__IPLProbeBatch_t value) {
    libphononJNI.IPLReflectionsBakeParams_probeBatch_set(swigCPtr, this, SWIGTYPE_p__IPLProbeBatch_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLProbeBatch_t getProbeBatch() {
    long cPtr = libphononJNI.IPLReflectionsBakeParams_probeBatch_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLProbeBatch_t(cPtr, false);
  }

  public void setSceneType(IPLSceneType value) {
    libphononJNI.IPLReflectionsBakeParams_sceneType_set(swigCPtr, this, value.swigValue());
  }

  public IPLSceneType getSceneType() {
    return IPLSceneType.swigToEnum(libphononJNI.IPLReflectionsBakeParams_sceneType_get(swigCPtr, this));
  }

  public void setIdentifier(IPLBakedDataIdentifier value) {
    libphononJNI.IPLReflectionsBakeParams_identifier_set(swigCPtr, this, IPLBakedDataIdentifier.getCPtr(value), value);
  }

  public IPLBakedDataIdentifier getIdentifier() {
    long cPtr = libphononJNI.IPLReflectionsBakeParams_identifier_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLBakedDataIdentifier(cPtr, false);
  }

  public void setBakeFlags(IPLReflectionsBakeFlags value) {
    libphononJNI.IPLReflectionsBakeParams_bakeFlags_set(swigCPtr, this, value.swigValue());
  }

  public IPLReflectionsBakeFlags getBakeFlags() {
    return IPLReflectionsBakeFlags.swigToEnum(libphononJNI.IPLReflectionsBakeParams_bakeFlags_get(swigCPtr, this));
  }

  public void setNumRays(int value) {
    libphononJNI.IPLReflectionsBakeParams_numRays_set(swigCPtr, this, value);
  }

  public int getNumRays() {
    return libphononJNI.IPLReflectionsBakeParams_numRays_get(swigCPtr, this);
  }

  public void setNumDiffuseSamples(int value) {
    libphononJNI.IPLReflectionsBakeParams_numDiffuseSamples_set(swigCPtr, this, value);
  }

  public int getNumDiffuseSamples() {
    return libphononJNI.IPLReflectionsBakeParams_numDiffuseSamples_get(swigCPtr, this);
  }

  public void setNumBounces(int value) {
    libphononJNI.IPLReflectionsBakeParams_numBounces_set(swigCPtr, this, value);
  }

  public int getNumBounces() {
    return libphononJNI.IPLReflectionsBakeParams_numBounces_get(swigCPtr, this);
  }

  public void setSimulatedDuration(float value) {
    libphononJNI.IPLReflectionsBakeParams_simulatedDuration_set(swigCPtr, this, value);
  }

  public float getSimulatedDuration() {
    return libphononJNI.IPLReflectionsBakeParams_simulatedDuration_get(swigCPtr, this);
  }

  public void setSavedDuration(float value) {
    libphononJNI.IPLReflectionsBakeParams_savedDuration_set(swigCPtr, this, value);
  }

  public float getSavedDuration() {
    return libphononJNI.IPLReflectionsBakeParams_savedDuration_get(swigCPtr, this);
  }

  public void setOrder(int value) {
    libphononJNI.IPLReflectionsBakeParams_order_set(swigCPtr, this, value);
  }

  public int getOrder() {
    return libphononJNI.IPLReflectionsBakeParams_order_get(swigCPtr, this);
  }

  public void setNumThreads(int value) {
    libphononJNI.IPLReflectionsBakeParams_numThreads_set(swigCPtr, this, value);
  }

  public int getNumThreads() {
    return libphononJNI.IPLReflectionsBakeParams_numThreads_get(swigCPtr, this);
  }

  public void setRayBatchSize(int value) {
    libphononJNI.IPLReflectionsBakeParams_rayBatchSize_set(swigCPtr, this, value);
  }

  public int getRayBatchSize() {
    return libphononJNI.IPLReflectionsBakeParams_rayBatchSize_get(swigCPtr, this);
  }

  public void setIrradianceMinDistance(float value) {
    libphononJNI.IPLReflectionsBakeParams_irradianceMinDistance_set(swigCPtr, this, value);
  }

  public float getIrradianceMinDistance() {
    return libphononJNI.IPLReflectionsBakeParams_irradianceMinDistance_get(swigCPtr, this);
  }

  public void setBakeBatchSize(int value) {
    libphononJNI.IPLReflectionsBakeParams_bakeBatchSize_set(swigCPtr, this, value);
  }

  public int getBakeBatchSize() {
    return libphononJNI.IPLReflectionsBakeParams_bakeBatchSize_get(swigCPtr, this);
  }

  public void setOpenCLDevice(SWIGTYPE_p__IPLOpenCLDevice_t value) {
    libphononJNI.IPLReflectionsBakeParams_openCLDevice_set(swigCPtr, this, SWIGTYPE_p__IPLOpenCLDevice_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLOpenCLDevice_t getOpenCLDevice() {
    long cPtr = libphononJNI.IPLReflectionsBakeParams_openCLDevice_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLOpenCLDevice_t(cPtr, false);
  }

  public void setRadeonRaysDevice(SWIGTYPE_p__IPLRadeonRaysDevice_t value) {
    libphononJNI.IPLReflectionsBakeParams_radeonRaysDevice_set(swigCPtr, this, SWIGTYPE_p__IPLRadeonRaysDevice_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLRadeonRaysDevice_t getRadeonRaysDevice() {
    long cPtr = libphononJNI.IPLReflectionsBakeParams_radeonRaysDevice_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLRadeonRaysDevice_t(cPtr, false);
  }

  public IPLReflectionsBakeParams() {
    this(libphononJNI.new_IPLReflectionsBakeParams(), true);
  }

}
