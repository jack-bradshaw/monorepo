/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class IPLPathBakeParams {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IPLPathBakeParams(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IPLPathBakeParams obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(IPLPathBakeParams obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libphononJNI.delete_IPLPathBakeParams(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setScene(SWIGTYPE_p__IPLScene_t value) {
    libphononJNI.IPLPathBakeParams_scene_set(swigCPtr, this, SWIGTYPE_p__IPLScene_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLScene_t getScene() {
    long cPtr = libphononJNI.IPLPathBakeParams_scene_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLScene_t(cPtr, false);
  }

  public void setProbeBatch(SWIGTYPE_p__IPLProbeBatch_t value) {
    libphononJNI.IPLPathBakeParams_probeBatch_set(swigCPtr, this, SWIGTYPE_p__IPLProbeBatch_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLProbeBatch_t getProbeBatch() {
    long cPtr = libphononJNI.IPLPathBakeParams_probeBatch_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLProbeBatch_t(cPtr, false);
  }

  public void setIdentifier(IPLBakedDataIdentifier value) {
    libphononJNI.IPLPathBakeParams_identifier_set(swigCPtr, this, IPLBakedDataIdentifier.getCPtr(value), value);
  }

  public IPLBakedDataIdentifier getIdentifier() {
    long cPtr = libphononJNI.IPLPathBakeParams_identifier_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLBakedDataIdentifier(cPtr, false);
  }

  public void setNumSamples(int value) {
    libphononJNI.IPLPathBakeParams_numSamples_set(swigCPtr, this, value);
  }

  public int getNumSamples() {
    return libphononJNI.IPLPathBakeParams_numSamples_get(swigCPtr, this);
  }

  public void setRadius(float value) {
    libphononJNI.IPLPathBakeParams_radius_set(swigCPtr, this, value);
  }

  public float getRadius() {
    return libphononJNI.IPLPathBakeParams_radius_get(swigCPtr, this);
  }

  public void setThreshold(float value) {
    libphononJNI.IPLPathBakeParams_threshold_set(swigCPtr, this, value);
  }

  public float getThreshold() {
    return libphononJNI.IPLPathBakeParams_threshold_get(swigCPtr, this);
  }

  public void setVisRange(float value) {
    libphononJNI.IPLPathBakeParams_visRange_set(swigCPtr, this, value);
  }

  public float getVisRange() {
    return libphononJNI.IPLPathBakeParams_visRange_get(swigCPtr, this);
  }

  public void setPathRange(float value) {
    libphononJNI.IPLPathBakeParams_pathRange_set(swigCPtr, this, value);
  }

  public float getPathRange() {
    return libphononJNI.IPLPathBakeParams_pathRange_get(swigCPtr, this);
  }

  public void setNumThreads(int value) {
    libphononJNI.IPLPathBakeParams_numThreads_set(swigCPtr, this, value);
  }

  public int getNumThreads() {
    return libphononJNI.IPLPathBakeParams_numThreads_get(swigCPtr, this);
  }

  public IPLPathBakeParams() {
    this(libphononJNI.new_IPLPathBakeParams(), true);
  }

}
