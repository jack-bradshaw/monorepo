/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class IPLBinauralEffectParams {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IPLBinauralEffectParams(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IPLBinauralEffectParams obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(IPLBinauralEffectParams obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libphononJNI.delete_IPLBinauralEffectParams(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setDirection(IPLVector3 value) {
    libphononJNI.IPLBinauralEffectParams_direction_set(swigCPtr, this, IPLVector3.getCPtr(value), value);
  }

  public IPLVector3 getDirection() {
    long cPtr = libphononJNI.IPLBinauralEffectParams_direction_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLVector3(cPtr, false);
  }

  public void setInterpolation(IPLHRTFInterpolation value) {
    libphononJNI.IPLBinauralEffectParams_interpolation_set(swigCPtr, this, value.swigValue());
  }

  public IPLHRTFInterpolation getInterpolation() {
    return IPLHRTFInterpolation.swigToEnum(libphononJNI.IPLBinauralEffectParams_interpolation_get(swigCPtr, this));
  }

  public void setSpatialBlend(float value) {
    libphononJNI.IPLBinauralEffectParams_spatialBlend_set(swigCPtr, this, value);
  }

  public float getSpatialBlend() {
    return libphononJNI.IPLBinauralEffectParams_spatialBlend_get(swigCPtr, this);
  }

  public void setHrtf(SWIGTYPE_p__IPLHRTF_t value) {
    libphononJNI.IPLBinauralEffectParams_hrtf_set(swigCPtr, this, SWIGTYPE_p__IPLHRTF_t.getCPtr(value));
  }

  public SWIGTYPE_p__IPLHRTF_t getHrtf() {
    long cPtr = libphononJNI.IPLBinauralEffectParams_hrtf_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p__IPLHRTF_t(cPtr, false);
  }

  public void setPeakDelays(SWIGTYPE_p_float value) {
    libphononJNI.IPLBinauralEffectParams_peakDelays_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  public SWIGTYPE_p_float getPeakDelays() {
    long cPtr = libphononJNI.IPLBinauralEffectParams_peakDelays_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public IPLBinauralEffectParams() {
    this(libphononJNI.new_IPLBinauralEffectParams(), true);
  }

}
