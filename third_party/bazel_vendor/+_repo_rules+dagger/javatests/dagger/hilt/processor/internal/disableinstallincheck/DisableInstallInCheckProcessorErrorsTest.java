/*
 * Copyright (C) 2020 The Dagger Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dagger.hilt.processor.internal.disableinstallincheck;

import androidx.room.compiler.processing.util.Source;
import dagger.hilt.android.testing.compile.HiltCompilerTests;
import dagger.testing.compile.CompilerTests;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

/** Tests for errors generated by {@link DisableInstallInCheckProcessor} */
@RunWith(JUnit4.class)
public class DisableInstallInCheckProcessorErrorsTest {

  @Test
  public void testIllegalCombinationInstallIn() {
    Source module =
        CompilerTests.javaSource(
            "foo.bar.NotModule",
            "package foo.bar;",
            "",
            "import dagger.hilt.migration.DisableInstallInCheck;",
            "",
            "@DisableInstallInCheck",
            "final class NotModule {}");

    Source entryPoint =
        CompilerTests.javaSource(
            "foo.bar.FooEntryPoint",
            "package foo.bar;",
            "",
            "import dagger.hilt.components.SingletonComponent;",
            "import dagger.hilt.migration.DisableInstallInCheck;",
            "import dagger.hilt.EntryPoint;",
            "import dagger.hilt.InstallIn;",
            "",
            "@DisableInstallInCheck",
            "@EntryPoint",
            "@InstallIn(SingletonComponent.class)",
            "interface FooEntryPoint {}");

    HiltCompilerTests.hiltCompiler(module, entryPoint)
        .withAdditionalJavacProcessors(new DisableInstallInCheckProcessor())
        .withAdditionalKspProcessors(new KspDisableInstallInCheckProcessor.Provider())
        .compile(
            subject -> {
              subject.hasErrorCount(2);
              subject
                  .hasErrorContaining(
                      "@DisableInstallInCheck should only be used on modules. However, it was found"
                          + " annotating foo.bar.NotModule")
                  .onSource(module)
                  .onLine(6);
              subject
                  .hasErrorContaining(
                      "@DisableInstallInCheck should only be used on modules. However, it was found"
                          + " annotating foo.bar.FooEntryPoint")
                  .onSource(entryPoint)
                  .onLine(11);
            });
  }
}
