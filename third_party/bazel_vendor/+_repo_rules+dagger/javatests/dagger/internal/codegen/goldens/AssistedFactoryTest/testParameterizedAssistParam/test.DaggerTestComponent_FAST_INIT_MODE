package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Provider;
import dagger.internal.SingleCheck;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImpl testComponentImpl = this;

    Provider<FooFactory<String>> fooFactoryProvider;

    TestComponentImpl() {

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.fooFactoryProvider = SingleCheck.provider(new SwitchingProvider<FooFactory<String>>(testComponentImpl, 0));
    }

    @Override
    public FooFactory<String> getFooFactory() {
      return fooFactoryProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final TestComponentImpl testComponentImpl;

      private final int id;

      SwitchingProvider(TestComponentImpl testComponentImpl, int id) {
        this.testComponentImpl = testComponentImpl;
        this.id = id;
      }

      @Override
      @SuppressWarnings("unchecked")
      public T get() {
        switch (id) {
          case 0: // test.FooFactory<java.lang.String>
          return (T) new FooFactory<String>() {
            @Override
            public Foo<String> create(String arg) {
              return new Foo<String>(arg);
            }
          };

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
