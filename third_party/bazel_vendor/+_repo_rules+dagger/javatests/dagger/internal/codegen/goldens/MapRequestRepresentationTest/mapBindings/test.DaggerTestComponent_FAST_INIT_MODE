package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.MapBuilder;
import dagger.internal.Provider;
import java.util.Collections;
import java.util.Map;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImpl testComponentImpl = this;

    Provider<Integer> provideIntProvider;

    Provider<Long> provideLong0Provider;

    Provider<Long> provideLong1Provider;

    Provider<Long> provideLong2Provider;

    TestComponentImpl() {

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideIntProvider = new SwitchingProvider<>(testComponentImpl, 0);
      this.provideLong0Provider = new SwitchingProvider<>(testComponentImpl, 1);
      this.provideLong1Provider = new SwitchingProvider<>(testComponentImpl, 2);
      this.provideLong2Provider = new SwitchingProvider<>(testComponentImpl, 3);
    }

    @Override
    public Map<String, String> strings() {
      return Collections.<String, String>emptyMap();
    }

    @Override
    public Map<String, javax.inject.Provider<String>> providerStrings() {
      return Collections.<String, javax.inject.Provider<String>>emptyMap();
    }

    @Override
    public Map<Integer, Integer> ints() {
      return Collections.<Integer, Integer>singletonMap(0, provideIntProvider.get());
    }

    @Override
    public Map<Integer, javax.inject.Provider<Integer>> providerInts() {
      return Collections.<Integer, javax.inject.Provider<Integer>>singletonMap(0, provideIntProvider);
    }

    @Override
    public Map<Long, Long> longs() {
      return MapBuilder.<Long, Long>newMapBuilder(3).put(0L, provideLong0Provider.get()).put(1L, provideLong1Provider.get()).put(2L, provideLong2Provider.get()).build();
    }

    @Override
    public Map<Long, javax.inject.Provider<Long>> providerLongs() {
      return MapBuilder.<Long, javax.inject.Provider<Long>>newMapBuilder(3).put(0L, provideLong0Provider).put(1L, provideLong1Provider).put(2L, provideLong2Provider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final TestComponentImpl testComponentImpl;

      private final int id;

      SwitchingProvider(TestComponentImpl testComponentImpl, int id) {
        this.testComponentImpl = testComponentImpl;
        this.id = id;
      }

      @Override
      @SuppressWarnings("unchecked")
      public T get() {
        switch (id) {
          case 0: // java.util.Map<java.lang.Integer,java.lang.Integer> test.MapModule#provideInt
          return (T) (Integer) (MapModule.provideInt());

          case 1: // java.util.Map<java.lang.Long,java.lang.Long> test.MapModule#provideLong0
          return (T) (Long) (MapModule.provideLong0());

          case 2: // java.util.Map<java.lang.Long,java.lang.Long> test.MapModule#provideLong1
          return (T) (Long) (MapModule.provideLong1());

          case 3: // java.util.Map<java.lang.Long,java.lang.Long> test.MapModule#provideLong2
          return (T) (Long) (MapModule.provideLong2());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
