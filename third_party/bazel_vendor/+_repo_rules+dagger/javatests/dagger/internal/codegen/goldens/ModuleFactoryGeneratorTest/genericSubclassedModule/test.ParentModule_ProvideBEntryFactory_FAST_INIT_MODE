package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.annotation.processing.Generated;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class ParentModule_ProvideBEntryFactory<A extends CharSequence, B, C extends Number & Comparable<C>> implements Factory<B> {
  private final ParentModule<A, B, C> module;

  private final Provider<B> bProvider;

  private ParentModule_ProvideBEntryFactory(ParentModule<A, B, C> module, Provider<B> bProvider) {
    this.module = module;
    this.bProvider = bProvider;
  }

  @Override
  public B get() {
    return provideBEntry(module, bProvider.get());
  }

  public static <A extends CharSequence, B, C extends Number & Comparable<C>> ParentModule_ProvideBEntryFactory<A, B, C> create(
      ParentModule<A, B, C> module, Provider<B> bProvider) {
    return new ParentModule_ProvideBEntryFactory<A, B, C>(module, bProvider);
  }

  public static <A extends CharSequence, B, C extends Number & Comparable<C>> B provideBEntry(
      ParentModule<A, B, C> instance, B b) {
    return Preconditions.checkNotNullFromProvides(instance.provideBEntry(b));
  }
}
