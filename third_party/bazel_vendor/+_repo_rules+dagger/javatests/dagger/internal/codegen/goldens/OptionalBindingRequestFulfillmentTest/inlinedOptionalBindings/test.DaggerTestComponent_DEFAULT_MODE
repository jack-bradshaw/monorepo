package test;

import com.google.common.base.Optional;
import dagger.Lazy;
import dagger.internal.DaggerGenerated;
import dagger.internal.ProviderOfLazy;
import javax.annotation.processing.Generated;
import javax.inject.Provider;
import other.DefinitelyNot;
import other.Maybe;
import other.Maybe_MaybeModule_ProvideMaybeFactory;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImpl testComponentImpl = this;

    TestComponentImpl() {


    }

    @Override
    public Optional<Maybe> maybe() {
      return Optional.of(Maybe_MaybeModule_ProvideMaybeFactory.provideMaybe());
    }

    @Override
    public Optional<Provider<Lazy<Maybe>>> providerOfLazyOfMaybe() {
      return Optional.of(ProviderOfLazy.create(Maybe_MaybeModule_ProvideMaybeFactory.create()));
    }

    @Override
    public Optional<DefinitelyNot> definitelyNot() {
      return Optional.absent();
    }

    @Override
    public Optional<Provider<Lazy<DefinitelyNot>>> providerOfLazyOfDefinitelyNot() {
      return Optional.absent();
    }
  }
}
