package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.annotation.processing.Generated;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class MyModule_ProvideStringFactory implements Factory<String> {
  private final MyModule module;

  private MyModule_ProvideStringFactory(MyModule module) {
    this.module = module;
  }

  @Override
  public String get() {
    return provideString(module);
  }

  public static MyModule_ProvideStringFactory create(Object module) {
    return new MyModule_ProvideStringFactory((MyModule) (module));
  }

  public static String provideString(Object instance) {
    return Preconditions.checkNotNullFromProvides(((MyModule) (instance)).provideString());
  }
}
