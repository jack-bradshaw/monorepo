package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Provider;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerSimpleComponent {
  private DaggerSimpleComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static SimpleComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public SimpleComponent build() {
      return new SimpleComponentImpl();
    }
  }

  private static final class SubImpl implements Sub {
    private final SimpleComponentImpl simpleComponentImpl;

    private final SubImpl subImpl = this;

    SubImpl(SimpleComponentImpl simpleComponentImpl) {
      this.simpleComponentImpl = simpleComponentImpl;


    }

    @Override
    public DependsOnScoped dependsOnScoped() {
      return new DependsOnScoped(simpleComponentImpl.scopedTypeProvider.get());
    }
  }

  private static final class SimpleComponentImpl implements SimpleComponent {
    private final SimpleComponentImpl simpleComponentImpl = this;

    Provider<ScopedType> scopedTypeProvider;

    SimpleComponentImpl() {

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.scopedTypeProvider = DoubleCheck.provider(new SwitchingProvider<ScopedType>(simpleComponentImpl, 0));
    }

    @Override
    public Sub sub() {
      return new SubImpl(simpleComponentImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SimpleComponentImpl simpleComponentImpl;

      private final int id;

      SwitchingProvider(SimpleComponentImpl simpleComponentImpl, int id) {
        this.simpleComponentImpl = simpleComponentImpl;
        this.id = id;
      }

      @Override
      @SuppressWarnings("unchecked")
      public T get() {
        switch (id) {
          case 0: // test.ScopedType
          return (T) new ScopedType();

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
