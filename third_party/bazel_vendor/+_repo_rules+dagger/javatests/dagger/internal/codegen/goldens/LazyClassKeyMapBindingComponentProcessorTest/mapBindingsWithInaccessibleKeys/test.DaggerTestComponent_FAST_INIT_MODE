package test;

import com.google.common.collect.ImmutableMap;
import dagger.internal.DaggerGenerated;
import dagger.internal.LazyClassKeyMap;
import dagger.internal.Provider;
import java.util.Map;
import javax.annotation.processing.Generated;
import mapkeys.MapKeys;
import mapkeys.MapModule;
import mapkeys.MapModule_ClassKey_LazyMapKey;
import mapkeys.MapModule_ComplexKeyWithInaccessibleAnnotationValueMapKey;
import mapkeys.MapModule_ComplexKeyWithInaccessibleArrayValueMapKey;
import mapkeys.MapModule_ComplexKeyWithInaccessibleValueMapKey;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImpl testComponentImpl = this;

    Provider<Map<Class<?>, Integer>> mapOfClassOfAndIntegerProvider;

    Provider<Map<MapKeys.ComplexKey, Integer>> mapOfComplexKeyAndIntegerProvider;

    TestComponentImpl() {

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.mapOfClassOfAndIntegerProvider = new SwitchingProvider<>(testComponentImpl, 0);
      this.mapOfComplexKeyAndIntegerProvider = new SwitchingProvider<>(testComponentImpl, 1);
    }

    @Override
    public Map<Class<?>, Integer> classKey() {
      return mapOfClassOfAndIntegerProvider.get();
    }

    @Override
    public javax.inject.Provider<Map<Class<?>, Integer>> classKeyProvider() {
      return mapOfClassOfAndIntegerProvider;
    }

    @Override
    public Map<MapKeys.ComplexKey, Integer> complexKey() {
      return mapOfComplexKeyAndIntegerProvider.get();
    }

    @Override
    public javax.inject.Provider<Map<MapKeys.ComplexKey, Integer>> complexKeyProvider() {
      return mapOfComplexKeyAndIntegerProvider;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final TestComponentImpl testComponentImpl;

      private final int id;

      SwitchingProvider(TestComponentImpl testComponentImpl, int id) {
        this.testComponentImpl = testComponentImpl;
        this.id = id;
      }

      @Override
      @SuppressWarnings("unchecked")
      public T get() {
        switch (id) {
          case 0: // java.util.Map<java.lang.Class<?>,java.lang.Integer>
          return (T) LazyClassKeyMap.<Integer>of(ImmutableMap.<String, Integer>of(MapModule_ClassKey_LazyMapKey.lazyClassKeyName, MapModule.classKey()));

          case 1: // java.util.Map<mapkeys.MapKeys.ComplexKey,java.lang.Integer>
          return (T) ImmutableMap.<MapKeys.ComplexKey, Integer>of(MapModule_ComplexKeyWithInaccessibleValueMapKey.create(), MapModule.complexKeyWithInaccessibleValue(), MapModule_ComplexKeyWithInaccessibleArrayValueMapKey.create(), MapModule.complexKeyWithInaccessibleArrayValue(), MapModule_ComplexKeyWithInaccessibleAnnotationValueMapKey.create(), MapModule.complexKeyWithInaccessibleAnnotationValue());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
