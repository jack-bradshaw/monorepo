package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerBComponent {
  private DaggerBComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  static final class Builder {
    private AComponent aComponent;

    private Builder() {
    }

    public Builder aComponent(AComponent aComponent) {
      this.aComponent = Preconditions.checkNotNull(aComponent);
      return this;
    }

    public BComponent build() {
      Preconditions.checkBuilderRequirement(aComponent, AComponent.class);
      return new BComponentImpl(aComponent);
    }
  }

  private static final class BComponentImpl implements BComponent {
    private final AComponent aComponent;

    private final BComponentImpl bComponentImpl = this;

    Provider<A> aProvider;

    BComponentImpl(AComponent aComponentParam) {
      this.aComponent = aComponentParam;
      initialize(aComponentParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final AComponent aComponentParam) {
      this.aProvider = new SwitchingProvider<>(bComponentImpl, 0);
    }

    @Override
    public B b() {
      return new B(aProvider);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final BComponentImpl bComponentImpl;

      private final int id;

      SwitchingProvider(BComponentImpl bComponentImpl, int id) {
        this.bComponentImpl = bComponentImpl;
        this.id = id;
      }

      @Override
      @SuppressWarnings("unchecked")
      public T get() {
        switch (id) {
          case 0: // test.A
          return (T) Preconditions.checkNotNullFromComponent(bComponentImpl.aComponent.a());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
