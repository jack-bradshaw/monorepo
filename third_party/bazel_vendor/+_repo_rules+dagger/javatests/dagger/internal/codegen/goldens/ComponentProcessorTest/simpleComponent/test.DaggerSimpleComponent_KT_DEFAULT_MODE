package test;

import dagger.Lazy;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerSimpleComponent {
  private DaggerSimpleComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static SimpleComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public SimpleComponent build() {
      return new SimpleComponentImpl();
    }
  }

  private static final class SimpleComponentImpl implements SimpleComponent {
    private final SimpleComponentImpl simpleComponentImpl = this;

    SimpleComponentImpl() {


    }

    @Override
    public SomeInjectableType someInjectableType() {
      return new SomeInjectableType();
    }

    @Override
    public Lazy<SomeInjectableType> lazySomeInjectableType() {
      return DoubleCheck.lazy(SomeInjectableType_Factory.create());
    }

    @Override
    public Provider<SomeInjectableType> someInjectableTypeProvider() {
      return SomeInjectableType_Factory.create();
    }
  }
}
