package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Provider;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.annotation.processing.Generated;

@ScopeMetadata
@QualifierMetadata("test.FooConstructorQualifier")
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class Foo_Factory implements Factory<Foo> {
  private final Provider<Integer> iProvider;

  private final Provider<String> injectFieldProvider;

  private final Provider<String> injectFieldProvider2;

  private final Provider<Float> fProvider;

  private Foo_Factory(Provider<Integer> iProvider, Provider<String> injectFieldProvider,
      Provider<String> injectFieldProvider2, Provider<Float> fProvider) {
    this.iProvider = iProvider;
    this.injectFieldProvider = injectFieldProvider;
    this.injectFieldProvider2 = injectFieldProvider2;
    this.fProvider = fProvider;
  }

  @Override
  public Foo get() {
    Foo instance = newInstance(iProvider.get());
    FooBase_MembersInjector.injectInjectField(instance, injectFieldProvider.get());
    Foo_MembersInjector.injectInjectField(instance, injectFieldProvider2.get());
    Foo_MembersInjector.injectInjectMethod(instance, fProvider.get());
    return instance;
  }

  public static Foo_Factory create(Provider<Integer> iProvider,
      Provider<String> injectFieldProvider, Provider<String> injectFieldProvider2,
      Provider<Float> fProvider) {
    return new Foo_Factory(iProvider, injectFieldProvider, injectFieldProvider2, fProvider);
  }

  public static Foo newInstance(int i) {
    return new Foo(i);
  }
}
