package test;

import com.google.common.collect.ImmutableMap;
import dagger.internal.DaggerGenerated;
import dagger.internal.MapFactory;
import dagger.internal.Provider;
import java.util.Map;
import javax.annotation.processing.Generated;
import mapkeys.MapKeys;
import mapkeys.MapModule;
import mapkeys.MapModule_ClassKeyFactory;
import mapkeys.MapModule_ClassKeyMapKey;
import mapkeys.MapModule_ComplexKeyWithInaccessibleAnnotationValueFactory;
import mapkeys.MapModule_ComplexKeyWithInaccessibleAnnotationValueMapKey;
import mapkeys.MapModule_ComplexKeyWithInaccessibleArrayValueFactory;
import mapkeys.MapModule_ComplexKeyWithInaccessibleArrayValueMapKey;
import mapkeys.MapModule_ComplexKeyWithInaccessibleValueFactory;
import mapkeys.MapModule_ComplexKeyWithInaccessibleValueMapKey;
import mapkeys.MapModule_EnumKeyFactory;
import mapkeys.MapModule_EnumKeyMapKey;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImpl testComponentImpl = this;

    Provider<Map<Class<?>, Integer>> mapOfClassOfAndIntegerProvider;

    @SuppressWarnings("rawtypes")
    Provider mapOfPackagePrivateEnumAndIntegerProvider;

    Provider<Map<MapKeys.ComplexKey, Integer>> mapOfComplexKeyAndIntegerProvider;

    TestComponentImpl() {

      initialize();

    }

    Map mapOfPackagePrivateEnumAndInteger() {
      return ImmutableMap.of(MapModule_EnumKeyMapKey.create(), MapModule.enumKey());
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.mapOfClassOfAndIntegerProvider = mapOfClassOfAndIntegerBuilder();
      this.mapOfPackagePrivateEnumAndIntegerProvider = mapOfPackagePrivateEnumAndIntegerBuilder();
      this.mapOfComplexKeyAndIntegerProvider = mapOfComplexKeyAndIntegerBuilder();
    }

    MapFactory<Class<?>, Integer> mapOfClassOfAndIntegerBuilder() {
      MapFactory.Builder<Class<?>, Integer> builder = MapFactory.builder(1);
      builder.put(MapModule_ClassKeyMapKey.create(), MapModule_ClassKeyFactory.create());
      return builder.build();
    }

    MapFactory mapOfPackagePrivateEnumAndIntegerBuilder() {
      MapFactory.Builder builder = MapFactory.builder(1);
      builder.put(MapModule_EnumKeyMapKey.create(), (Provider) (MapModule_EnumKeyFactory.create()));
      return builder.build();
    }

    MapFactory<MapKeys.ComplexKey, Integer> mapOfComplexKeyAndIntegerBuilder() {
      MapFactory.Builder<MapKeys.ComplexKey, Integer> builder = MapFactory.builder(3);
      builder.put(MapModule_ComplexKeyWithInaccessibleValueMapKey.create(), MapModule_ComplexKeyWithInaccessibleValueFactory.create());
      builder.put(MapModule_ComplexKeyWithInaccessibleArrayValueMapKey.create(), MapModule_ComplexKeyWithInaccessibleArrayValueFactory.create());
      builder.put(MapModule_ComplexKeyWithInaccessibleAnnotationValueMapKey.create(), MapModule_ComplexKeyWithInaccessibleAnnotationValueFactory.create());
      return builder.build();
    }

    @Override
    public Map<Class<?>, Integer> classKey() {
      return ImmutableMap.<Class<?>, Integer>of(MapModule_ClassKeyMapKey.create(), MapModule.classKey());
    }

    @Override
    public javax.inject.Provider<Map<Class<?>, Integer>> classKeyProvider() {
      return mapOfClassOfAndIntegerProvider;
    }

    @Override
    public Object inaccessibleEnum() {
      return mapOfPackagePrivateEnumAndInteger();
    }

    @Override
    public javax.inject.Provider<Object> inaccessibleEnumProvider() {
      return mapOfPackagePrivateEnumAndIntegerProvider;
    }

    @Override
    public Map<MapKeys.ComplexKey, Integer> complexKey() {
      return ImmutableMap.<MapKeys.ComplexKey, Integer>of(MapModule_ComplexKeyWithInaccessibleValueMapKey.create(), MapModule.complexKeyWithInaccessibleValue(), MapModule_ComplexKeyWithInaccessibleArrayValueMapKey.create(), MapModule.complexKeyWithInaccessibleArrayValue(), MapModule_ComplexKeyWithInaccessibleAnnotationValueMapKey.create(), MapModule.complexKeyWithInaccessibleAnnotationValue());
    }

    @Override
    public javax.inject.Provider<Map<MapKeys.ComplexKey, Integer>> complexKeyProvider() {
      return mapOfComplexKeyAndIntegerProvider;
    }
  }
}
