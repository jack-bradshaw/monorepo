package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import javax.annotation.processing.Generated;
import pkg1.A;
import pkg1.AComponent;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerBComponent {
  private DaggerBComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  static final class Builder {
    private AComponent aComponent;

    private pkg2.AComponent aComponent2;

    private Builder() {
    }

    public Builder aComponent(AComponent aComponent) {
      this.aComponent = Preconditions.checkNotNull(aComponent);
      return this;
    }

    public Builder aComponent(pkg2.AComponent aComponent) {
      this.aComponent2 = Preconditions.checkNotNull(aComponent);
      return this;
    }

    public BComponent build() {
      Preconditions.checkBuilderRequirement(aComponent, AComponent.class);
      Preconditions.checkBuilderRequirement(aComponent2, pkg2.AComponent.class);
      return new BComponentImpl(aComponent, aComponent2);
    }
  }

  private static final class BComponentImpl implements BComponent {
    private final BComponentImpl bComponentImpl = this;

    Provider<A> aProvider;

    Provider<pkg2.A> aProvider2;

    BComponentImpl(AComponent aComponentParam, pkg2.AComponent aComponentParam2) {

      initialize(aComponentParam, aComponentParam2);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final AComponent aComponentParam,
        final pkg2.AComponent aComponentParam2) {
      this.aProvider = new AProvider(aComponentParam);
      this.aProvider2 = new AProvider2(aComponentParam2);
    }

    @Override
    public B b() {
      return new B(aProvider, aProvider2);
    }

    private static final class AProvider implements Provider<A> {
      private final AComponent aComponent;

      AProvider(AComponent aComponent) {
        this.aComponent = aComponent;
      }

      @Override
      public A get() {
        return Preconditions.checkNotNullFromComponent(aComponent.a());
      }
    }

    private static final class AProvider2 implements Provider<pkg2.A> {
      private final pkg2.AComponent aComponent;

      AProvider2(pkg2.AComponent aComponent) {
        this.aComponent = aComponent;
      }

      @Override
      public pkg2.A get() {
        return Preconditions.checkNotNullFromComponent(aComponent.a());
      }
    }
  }
}
