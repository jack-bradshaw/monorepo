package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static TestComponent.Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().create();
  }

  private static final class Builder implements TestComponent.Builder {
    private TestModule testModule;

    @Override
    public Builder setTestModule(TestModule testModule) {
      this.testModule = Preconditions.checkNotNull(testModule);
      return this;
    }

    @Override
    public TestComponent create() {
      if (testModule == null) {
        this.testModule = new TestModule();
      }
      return new TestComponentImpl(testModule);
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestModule testModule;

    private final TestComponentImpl testComponentImpl = this;

    TestComponentImpl(TestModule testModuleParam) {
      this.testModule = testModuleParam;

    }

    @Override
    public String string() {
      return TestModule_StringFactory.string(testModule);
    }
  }
}
