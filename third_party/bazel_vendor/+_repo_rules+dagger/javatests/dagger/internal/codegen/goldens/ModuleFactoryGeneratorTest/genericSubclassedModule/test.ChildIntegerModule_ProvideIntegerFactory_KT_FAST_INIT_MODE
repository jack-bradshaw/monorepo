package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.annotation.processing.Generated;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class ChildIntegerModule_ProvideIntegerFactory implements Factory<Integer> {
  private final ChildIntegerModule module;

  private ChildIntegerModule_ProvideIntegerFactory(ChildIntegerModule module) {
    this.module = module;
  }

  @Override
  public Integer get() {
    return provideInteger(module);
  }

  public static ChildIntegerModule_ProvideIntegerFactory create(Object module) {
    return new ChildIntegerModule_ProvideIntegerFactory((ChildIntegerModule) (module));
  }

  public static Integer provideInteger(Object instance) {
    return Preconditions.checkNotNullFromProvides(((ChildIntegerModule) (instance)).provideInteger());
  }
}
