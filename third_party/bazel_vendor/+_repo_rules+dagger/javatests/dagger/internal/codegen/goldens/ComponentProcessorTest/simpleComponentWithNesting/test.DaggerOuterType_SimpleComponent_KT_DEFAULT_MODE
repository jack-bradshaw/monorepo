package test;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.DaggerGenerated;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerOuterType_SimpleComponent {
  private DaggerOuterType_SimpleComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static OuterType.SimpleComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public OuterType.SimpleComponent build() {
      return new SimpleComponentImpl();
    }
  }

  private static final class SimpleComponentImpl implements OuterType.SimpleComponent {
    private final SimpleComponentImpl simpleComponentImpl = this;

    SimpleComponentImpl() {


    }

    @Override
    public OuterType.A a() {
      return new OuterType.A();
    }

    @Override
    public void inject(OuterType.B b) {
      injectB(b);
    }

    @CanIgnoreReturnValue
    private OuterType.B injectB(OuterType.B instance) {
      OuterType_B_MembersInjector.injectA(instance, new OuterType.A());
      return instance;
    }
  }
}
