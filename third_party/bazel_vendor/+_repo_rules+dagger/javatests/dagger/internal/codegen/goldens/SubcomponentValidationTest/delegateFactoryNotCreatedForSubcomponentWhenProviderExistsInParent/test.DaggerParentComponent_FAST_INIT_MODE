package test;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Provider;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
final class DaggerParentComponent {
  private DaggerParentComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ParentComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public ParentComponent build() {
      return new ParentComponentImpl();
    }
  }

  private static final class ChildComponentImpl implements ChildComponent {
    private final ChildModule childModule;

    private final ParentComponentImpl parentComponentImpl;

    private final ChildComponentImpl childComponentImpl = this;

    ChildComponentImpl(ParentComponentImpl parentComponentImpl) {
      this.parentComponentImpl = parentComponentImpl;
      this.childModule = new ChildModule();

    }

    NeedsDep1 needsDep1() {
      return new NeedsDep1(parentComponentImpl.dep1Provider.get());
    }

    A a() {
      return injectA(A_Factory.newInstance(needsDep1(), parentComponentImpl.dep1Provider.get(), parentComponentImpl.dep2Provider.get()));
    }

    @Override
    public Object object() {
      return ChildModule_ProvideObjectFactory.provideObject(childModule, a());
    }

    @CanIgnoreReturnValue
    private A injectA(A instance) {
      A_MembersInjector.injectMethodA(instance);
      return instance;
    }
  }

  private static final class ParentComponentImpl implements ParentComponent {
    private final ParentComponentImpl parentComponentImpl = this;

    Provider<Dep1> dep1Provider;

    Provider<Dep2> dep2Provider;

    ParentComponentImpl() {

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.dep1Provider = DoubleCheck.provider(new SwitchingProvider<Dep1>(parentComponentImpl, 0));
      this.dep2Provider = DoubleCheck.provider(new SwitchingProvider<Dep2>(parentComponentImpl, 1));
    }

    @Override
    public Dep1 dep1() {
      return dep1Provider.get();
    }

    @Override
    public Dep2 dep2() {
      return dep2Provider.get();
    }

    @Override
    public ChildComponent childComponent() {
      return new ChildComponentImpl(parentComponentImpl);
    }

    @CanIgnoreReturnValue
    private Dep1 injectDep1(Dep1 instance) {
      Dep1_MembersInjector.injectDep1Method(instance);
      return instance;
    }

    @CanIgnoreReturnValue
    private Dep2 injectDep2(Dep2 instance2) {
      Dep2_MembersInjector.injectDep2Method(instance2);
      return instance2;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final ParentComponentImpl parentComponentImpl;

      private final int id;

      SwitchingProvider(ParentComponentImpl parentComponentImpl, int id) {
        this.parentComponentImpl = parentComponentImpl;
        this.id = id;
      }

      @Override
      @SuppressWarnings("unchecked")
      public T get() {
        switch (id) {
          case 0: // test.Dep1
          return (T) parentComponentImpl.injectDep1(Dep1_Factory.newInstance());

          case 1: // test.Dep2
          return (T) parentComponentImpl.injectDep2(Dep2_Factory.newInstance());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
